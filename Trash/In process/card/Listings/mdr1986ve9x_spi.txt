; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mdr1986ve9x_spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mdr1986ve9x_spi.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -ID:\Keil555\1986VE9X\card\RTE -ID:\Keil555\1986VE9X\card\RTE\Device\MDR1986BE93 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Driver\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\RTOS\RTX\INC -IC:\Keil_v5\ARM\PACK\Keil\MDK-Middleware\6.5.0\FileSystem\Include -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\CMSIS_Driver\MDR1986VE9X -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Config -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\CoreSupport -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -D__RTX -D__UVISION_VERSION=516 -D_RTE_ -DUSE_MDR32F9Q3_Rev1 --signed_chars --omf_browse=.\objects\mdr1986ve9x_spi.crf C:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\CMSIS_Driver\MDR1986VE9X\MDR1986VE9X_SPI.c]
                          THUMB

                          AREA ||i.SSP0_Control||, CODE, READONLY, ALIGN=2

                  SSP0_Control PROC
;;;676    static uint32_t       SSP0_GetDataCount        (void)                                              { return SSPx_GetDataCount (&SSP0_Resources); }
;;;677    static int32_t        SSP0_Control             (uint32_t control, uint32_t arg)                    { return SSPx_Control      (control, arg, &SSP0_Resources); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4a03              LDR      r2,|L1.20|
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SSPx_Control
000010  bd70              POP      {r4-r6,pc}
;;;678    static ARM_SPI_STATUS SSP0_GetStatus           (void)                                              { return SSPx_GetStatus    (&SSP0_Resources); }
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_GetDataCount||, CODE, READONLY, ALIGN=2

                  SSP0_GetDataCount PROC
;;;675    static int32_t        SSP0_Transfer            (const void *data_out, void *data_in, uint32_t num) { return SSPx_Transfer     (data_out, data_in, num, &SSP0_Resources); }
;;;676    static uint32_t       SSP0_GetDataCount        (void)                                              { return SSPx_GetDataCount (&SSP0_Resources); }
000000  b510              PUSH     {r4,lr}
000002  4802              LDR      r0,|L2.12|
000004  f7fffffe          BL       SSPx_GetDataCount
000008  bd10              POP      {r4,pc}
;;;677    static int32_t        SSP0_Control             (uint32_t control, uint32_t arg)                    { return SSPx_Control      (control, arg, &SSP0_Resources); }
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_GetStatus||, CODE, READONLY, ALIGN=2

                  SSP0_GetStatus PROC
;;;677    static int32_t        SSP0_Control             (uint32_t control, uint32_t arg)                    { return SSPx_Control      (control, arg, &SSP0_Resources); }
;;;678    static ARM_SPI_STATUS SSP0_GetStatus           (void)                                              { return SSPx_GetStatus    (&SSP0_Resources); }
000000  b508              PUSH     {r3,lr}
000002  4802              LDR      r0,|L3.12|
000004  f7fffffe          BL       SSPx_GetStatus
000008  9000              STR      r0,[sp,#0]
00000a  bd08              POP      {r3,pc}
;;;679    void									SSP1_IRQHandler          (void)                                              { SSPx_IRQHandler          (&SSP0_Resources); }
                          ENDP

                  |L3.12|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_Initialize||, CODE, READONLY, ALIGN=2

                  SSP0_Initialize PROC
;;;669    #if (RTE_SSP0)
;;;670    static int32_t        SSP0_Initialize          (ARM_SPI_SignalEvent_t pSignalEvent)                { return SSPx_Initialize   (pSignalEvent, &SSP0_Resources); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4902              LDR      r1,|L4.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SSPx_Initialize
00000c  bd10              POP      {r4,pc}
;;;671    static int32_t        SSP0_Uninitialize        (void)                                              { return SSPx_Uninitialize (&SSP0_Resources); }
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_PowerControl||, CODE, READONLY, ALIGN=2

                  SSP0_PowerControl PROC
;;;671    static int32_t        SSP0_Uninitialize        (void)                                              { return SSPx_Uninitialize (&SSP0_Resources); }
;;;672    static int32_t        SSP0_PowerControl        (ARM_POWER_STATE state)                             { return SSPx_PowerControl (state, &SSP0_Resources); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4902              LDR      r1,|L5.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SSPx_PowerControl
00000c  bd10              POP      {r4,pc}
;;;673    static int32_t        SSP0_Send                (const void *data, uint32_t num)                    { return SSPx_Send         (data, num, &SSP0_Resources); }
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_Receive||, CODE, READONLY, ALIGN=2

                  SSP0_Receive PROC
;;;673    static int32_t        SSP0_Send                (const void *data, uint32_t num)                    { return SSPx_Send         (data, num, &SSP0_Resources); }
;;;674    static int32_t        SSP0_Receive             (void *data, uint32_t num)                          { return SSPx_Receive      (data, num, &SSP0_Resources); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4a03              LDR      r2,|L6.20|
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SSPx_Receive
000010  bd70              POP      {r4-r6,pc}
;;;675    static int32_t        SSP0_Transfer            (const void *data_out, void *data_in, uint32_t num) { return SSPx_Transfer     (data_out, data_in, num, &SSP0_Resources); }
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_Send||, CODE, READONLY, ALIGN=2

                  SSP0_Send PROC
;;;672    static int32_t        SSP0_PowerControl        (ARM_POWER_STATE state)                             { return SSPx_PowerControl (state, &SSP0_Resources); }
;;;673    static int32_t        SSP0_Send                (const void *data, uint32_t num)                    { return SSPx_Send         (data, num, &SSP0_Resources); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4a03              LDR      r2,|L7.20|
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SSPx_Send
000010  bd70              POP      {r4-r6,pc}
;;;674    static int32_t        SSP0_Receive             (void *data, uint32_t num)                          { return SSPx_Receive      (data, num, &SSP0_Resources); }
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_Transfer||, CODE, READONLY, ALIGN=2

                  SSP0_Transfer PROC
;;;674    static int32_t        SSP0_Receive             (void *data, uint32_t num)                          { return SSPx_Receive      (data, num, &SSP0_Resources); }
;;;675    static int32_t        SSP0_Transfer            (const void *data_out, void *data_in, uint32_t num) { return SSPx_Transfer     (data_out, data_in, num, &SSP0_Resources); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  4b03              LDR      r3,|L8.24|
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       SSPx_Transfer
000014  bd70              POP      {r4-r6,pc}
;;;676    static uint32_t       SSP0_GetDataCount        (void)                                              { return SSPx_GetDataCount (&SSP0_Resources); }
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_Uninitialize||, CODE, READONLY, ALIGN=2

                  SSP0_Uninitialize PROC
;;;670    static int32_t        SSP0_Initialize          (ARM_SPI_SignalEvent_t pSignalEvent)                { return SSPx_Initialize   (pSignalEvent, &SSP0_Resources); }
;;;671    static int32_t        SSP0_Uninitialize        (void)                                              { return SSPx_Uninitialize (&SSP0_Resources); }
000000  b510              PUSH     {r4,lr}
000002  4802              LDR      r0,|L9.12|
000004  f7fffffe          BL       SSPx_Uninitialize
000008  bd10              POP      {r4,pc}
;;;672    static int32_t        SSP0_PowerControl        (ARM_POWER_STATE state)                             { return SSPx_PowerControl (state, &SSP0_Resources); }
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      SSP0_Resources

                          AREA ||i.SSP1_IRQHandler||, CODE, READONLY, ALIGN=2

                  SSP1_IRQHandler PROC
;;;678    static ARM_SPI_STATUS SSP0_GetStatus           (void)                                              { return SSPx_GetStatus    (&SSP0_Resources); }
;;;679    void									SSP1_IRQHandler          (void)                                              { SSPx_IRQHandler          (&SSP0_Resources); }
000000  b510              PUSH     {r4,lr}
000002  4802              LDR      r0,|L10.12|
000004  f7fffffe          BL       SSPx_IRQHandler
000008  bd10              POP      {r4,pc}
;;;680    
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      SSP0_Resources

                          AREA ||i.SSP_GetCapabilities||, CODE, READONLY, ALIGN=2

                  SSP_GetCapabilities PROC
;;;164    
;;;165    static ARM_SPI_CAPABILITIES SSP_GetCapabilities (void)
000000  4801              LDR      r0,|L11.8|
;;;166    {
;;;167    	return DriverCapabilities;
000002  6800              LDR      r0,[r0,#0]  ; DriverCapabilities
;;;168    }
000004  4770              BX       lr
;;;169    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      DriverCapabilities

                          AREA ||i.SSP_GetVersion||, CODE, READONLY, ALIGN=2

                  SSP_GetVersion PROC
;;;159    
;;;160    static ARM_DRIVER_VERSION SSP_GetVersion (void)
000000  b508              PUSH     {r3,lr}
;;;161    {
;;;162    	return DriverVersion;
000002  4802              LDR      r0,|L12.12|
000004  6800              LDR      r0,[r0,#0]  ; DriverVersion
000006  9000              STR      r0,[sp,#0]
;;;163    }
000008  bd08              POP      {r3,pc}
;;;164    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      DriverVersion

                          AREA ||i.SSP_PinConfigure||, CODE, READONLY, ALIGN=1

                  SSP_PinConfigure PROC
;;;104    
;;;105    void SSP_PinConfigure (MDR_PORT_TypeDef* Port, uint8_t Pin, uint8_t Func, bool PinState)
000000  b570              PUSH     {r4-r6,lr}
;;;106    {
;;;107    	Port->ANALOG |= (1<<Pin);
000002  68c4              LDR      r4,[r0,#0xc]
000004  2501              MOVS     r5,#1
000006  408d              LSLS     r5,r5,r1
000008  432c              ORRS     r4,r4,r5
00000a  60c4              STR      r4,[r0,#0xc]
;;;108    	Port->FUNC &= ~(PORT_FUNC_MODE_Msk<<Pin*2);
00000c  6884              LDR      r4,[r0,#8]
00000e  004e              LSLS     r6,r1,#1
000010  2503              MOVS     r5,#3
000012  40b5              LSLS     r5,r5,r6
000014  43ac              BICS     r4,r4,r5
000016  6084              STR      r4,[r0,#8]
;;;109    	Port->FUNC |= (Func<<Pin*2);
000018  6884              LDR      r4,[r0,#8]
00001a  004d              LSLS     r5,r1,#1
00001c  fa02f505          LSL      r5,r2,r5
000020  432c              ORRS     r4,r4,r5
000022  6084              STR      r4,[r0,#8]
;;;110    	
;;;111    	if (PinState)
000024  b1ab              CBZ      r3,|L13.82|
;;;112    	{
;;;113    		Port->RXTX &= ~(1<<Pin);
000026  6804              LDR      r4,[r0,#0]
000028  2501              MOVS     r5,#1
00002a  408d              LSLS     r5,r5,r1
00002c  43ac              BICS     r4,r4,r5
00002e  6004              STR      r4,[r0,#0]
;;;114    		Port->OE |= (1<<Pin);
000030  6845              LDR      r5,[r0,#4]
000032  2401              MOVS     r4,#1
000034  408c              LSLS     r4,r4,r1
000036  4325              ORRS     r5,r5,r4
000038  6045              STR      r5,[r0,#4]
;;;115    		Port->PWR |= (PORT_PWR_Msk<<Pin*2);
00003a  6984              LDR      r4,[r0,#0x18]
00003c  004e              LSLS     r6,r1,#1
00003e  2503              MOVS     r5,#3
000040  40b5              LSLS     r5,r5,r6
000042  432c              ORRS     r4,r4,r5
000044  6184              STR      r4,[r0,#0x18]
;;;116    		Port->PD &= ~(1<<Pin);
000046  6945              LDR      r5,[r0,#0x14]
000048  2401              MOVS     r4,#1
00004a  408c              LSLS     r4,r4,r1
00004c  43a5              BICS     r5,r5,r4
00004e  6145              STR      r5,[r0,#0x14]
000050  e010              B        |L13.116|
                  |L13.82|
;;;117    	}
;;;118    	else
;;;119    	{
;;;120    		Port->OE &= ~(1<<Pin);
000052  6845              LDR      r5,[r0,#4]
000054  2401              MOVS     r4,#1
000056  408c              LSLS     r4,r4,r1
000058  43a5              BICS     r5,r5,r4
00005a  6045              STR      r5,[r0,#4]
;;;121    		Port->GFEN &= ~(1<<Pin);
00005c  69c5              LDR      r5,[r0,#0x1c]
00005e  2401              MOVS     r4,#1
000060  408c              LSLS     r4,r4,r1
000062  43a5              BICS     r5,r5,r4
000064  61c5              STR      r5,[r0,#0x1c]
;;;122    		Port->PD &= ~(1<<(Pin+PORT_PD_SHM_Pos));
000066  6944              LDR      r4,[r0,#0x14]
000068  f1010510          ADD      r5,r1,#0x10
00006c  2601              MOVS     r6,#1
00006e  40ae              LSLS     r6,r6,r5
000070  43b4              BICS     r4,r4,r6
000072  6144              STR      r4,[r0,#0x14]
                  |L13.116|
;;;123    	}
;;;124    	
;;;125    	Port->PULL &= ~((1<<Pin) | (1<<(Pin+PORT_PULL_UP_Pos)));
000074  2401              MOVS     r4,#1
000076  408c              LSLS     r4,r4,r1
000078  f1010510          ADD      r5,r1,#0x10
00007c  2601              MOVS     r6,#1
00007e  40ae              LSLS     r6,r6,r5
000080  4334              ORRS     r4,r4,r6
000082  6905              LDR      r5,[r0,#0x10]
000084  43a5              BICS     r5,r5,r4
000086  6105              STR      r5,[r0,#0x10]
;;;126    }
000088  bd70              POP      {r4-r6,pc}
;;;127    
                          ENDP


                          AREA ||i.SSP_PinUnconfigure||, CODE, READONLY, ALIGN=1

                  SSP_PinUnconfigure PROC
;;;127    
;;;128    void SSP_PinUnconfigure (MDR_PORT_TypeDef* Port, uint8_t Pin)
000000  b510              PUSH     {r4,lr}
;;;129    {
;;;130    	Port->RXTX &= ~(1<<Pin);
000002  6803              LDR      r3,[r0,#0]
000004  2201              MOVS     r2,#1
000006  408a              LSLS     r2,r2,r1
000008  4393              BICS     r3,r3,r2
00000a  6003              STR      r3,[r0,#0]
;;;131    	Port->ANALOG &= ~(1<<Pin);
00000c  68c2              LDR      r2,[r0,#0xc]
00000e  2301              MOVS     r3,#1
000010  408b              LSLS     r3,r3,r1
000012  439a              BICS     r2,r2,r3
000014  60c2              STR      r2,[r0,#0xc]
;;;132    	Port->FUNC &= ~(PORT_FUNC_MODE_Msk<<Pin*2);
000016  6882              LDR      r2,[r0,#8]
000018  004c              LSLS     r4,r1,#1
00001a  2303              MOVS     r3,#3
00001c  40a3              LSLS     r3,r3,r4
00001e  439a              BICS     r2,r2,r3
000020  6082              STR      r2,[r0,#8]
;;;133    	Port->OE &= ~(1<<Pin);
000022  6842              LDR      r2,[r0,#4]
000024  2301              MOVS     r3,#1
000026  408b              LSLS     r3,r3,r1
000028  439a              BICS     r2,r2,r3
00002a  6042              STR      r2,[r0,#4]
;;;134    	Port->PWR &= ~(PORT_PWR_Msk<<Pin*2);
00002c  6982              LDR      r2,[r0,#0x18]
00002e  004c              LSLS     r4,r1,#1
000030  2303              MOVS     r3,#3
000032  40a3              LSLS     r3,r3,r4
000034  439a              BICS     r2,r2,r3
000036  6182              STR      r2,[r0,#0x18]
;;;135    	Port->GFEN &= ~(1<<Pin);
000038  69c2              LDR      r2,[r0,#0x1c]
00003a  2301              MOVS     r3,#1
00003c  408b              LSLS     r3,r3,r1
00003e  439a              BICS     r2,r2,r3
000040  61c2              STR      r2,[r0,#0x1c]
;;;136    	Port->PULL &= ~((1<<Pin) | (1<<(Pin+PORT_PULL_UP_Pos)));
000042  2201              MOVS     r2,#1
000044  408a              LSLS     r2,r2,r1
000046  f1010310          ADD      r3,r1,#0x10
00004a  2401              MOVS     r4,#1
00004c  409c              LSLS     r4,r4,r3
00004e  4322              ORRS     r2,r2,r4
000050  6903              LDR      r3,[r0,#0x10]
000052  4393              BICS     r3,r3,r2
000054  6103              STR      r3,[r0,#0x10]
;;;137    	Port->PD &= ~((1<<Pin) | (1<<(Pin+PORT_PD_SHM_Pos)));
000056  2201              MOVS     r2,#1
000058  408a              LSLS     r2,r2,r1
00005a  f1010310          ADD      r3,r1,#0x10
00005e  2401              MOVS     r4,#1
000060  409c              LSLS     r4,r4,r3
000062  4322              ORRS     r2,r2,r4
000064  6943              LDR      r3,[r0,#0x14]
000066  4393              BICS     r3,r3,r2
000068  6143              STR      r3,[r0,#0x14]
;;;138    }
00006a  bd10              POP      {r4,pc}
;;;139    
                          ENDP


                          AREA ||i.SSPx_Control||, CODE, READONLY, ALIGN=2

                  SSPx_Control PROC
;;;371    
;;;372    static int32_t SSPx_Control (uint32_t control, uint32_t arg, SSP_RESOURCES *ssp)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;373    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;374    	uint32_t cpsr, scr, clk, data_bits;
;;;375      uint32_t best_cpsr = 2, best_scr = 0;
00000a  f04f0b02          MOV      r11,#2
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
;;;376    	
;;;377    	if (!(ssp->info->state & SSP_POWERED))
000012  6be0              LDR      r0,[r4,#0x3c]
000014  7a00              LDRB     r0,[r0,#8]
000016  f0000002          AND      r0,r0,#2
00001a  b918              CBNZ     r0,|L15.36|
;;;378    		return ARM_DRIVER_ERROR;
00001c  f04f30ff          MOV      r0,#0xffffffff
                  |L15.32|
;;;379    	
;;;380    	if ((control & ARM_SPI_CONTROL_Msk) == ARM_SPI_ABORT_TRANSFER)
;;;381    	{
;;;382    		ssp->reg->CR1 &= ~SSP_CR1_SSE;         // Disable SSP
;;;383        memset (ssp->xfer, 0, sizeof(SSP_TRANSFER_INFO));
;;;384        ssp->reg->IMSC = 0;                    // Disable interrupts
;;;385        ssp->info->status.busy = 0;
;;;386        ssp->reg->CR1 |= SSP_CR1_SSE;          // Enable  SSP
;;;387    		
;;;388        return ARM_DRIVER_OK;
;;;389      }
;;;390    	
;;;391    	if (ssp->info->status.busy)
;;;392    		return ARM_DRIVER_ERROR_BUSY;
;;;393    	
;;;394    	switch (control & ARM_SPI_CONTROL_Msk)
;;;395    	{
;;;396    		default:
;;;397    			return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;398        case ARM_SPI_MODE_INACTIVE:             // SPI Inactive
;;;399    			ssp->reg->CR1    &= ~SSP_CR1_SSE;     // Disable SSP
;;;400          ssp->info->mode  &= ~ARM_SPI_CONTROL_Msk;
;;;401          ssp->info->mode  |=  ARM_SPI_MODE_INACTIVE;
;;;402          ssp->info->state &= ~SSP_CONFIGURED;
;;;403    		
;;;404    			return ARM_DRIVER_OK;
;;;405        case ARM_SPI_MODE_MASTER:               // SPI Master (Output on MOSI, Input on MISO); arg = Bus Speed in bps
;;;406    			ssp->reg->CR1    &= ~SSP_CR1_SSE;     // Disable SSP
;;;407          ssp->reg->CR1    &= ~SSP_CR1_MS;      // Set master mode
;;;408          ssp->info->mode  &= ~ARM_SPI_CONTROL_Msk;
;;;409          ssp->info->mode  |=  ARM_SPI_MODE_MASTER;
;;;410          ssp->info->state |=  SSP_CONFIGURED;
;;;411          ssp->reg->CR1    |=  SSP_CR1_SSE;     // Enable  SSP
;;;412    		
;;;413          goto set_speed;
;;;414        case ARM_SPI_MODE_SLAVE:                // SPI Slave  (Output on MISO, Input on MOSI)
;;;415    			ssp->reg->CR1    &= ~SSP_CR1_SSE;     // Disable SSP
;;;416          ssp->reg->CR1    |=  SSP_CR1_MS;      // Set slave mode
;;;417          ssp->info->mode  &= ~ARM_SPI_CONTROL_Msk;
;;;418          ssp->info->mode  |=  ARM_SPI_MODE_SLAVE;
;;;419          ssp->info->state |=  SSP_CONFIGURED;
;;;420          ssp->reg->CR1    |=  SSP_CR1_SSE;     // Enable  SSP
;;;421    		
;;;422    			break;
;;;423        case ARM_SPI_MODE_MASTER_SIMPLEX:       // SPI Master (Output/Input on MOSI); arg = Bus Speed in bps
;;;424        case ARM_SPI_MODE_SLAVE_SIMPLEX:        // SPI Slave  (Output/Input on MISO)
;;;425            return ARM_SPI_ERROR_MODE;
;;;426    
;;;427        case ARM_SPI_SET_BUS_SPEED:             // Set Bus Speed in bps; arg = value
;;;428    set_speed:
;;;429          clk = RTE_HCLK / ssp->clk.div;
;;;430    		
;;;431          for (cpsr = 2; cpsr < 255; cpsr += 2)	// Loop through clock prescaler
;;;432            for (scr = 0; scr < 256; scr++)			// Loop through bit prescaler
;;;433              if (clk == (arg * cpsr * (scr+1)))
;;;434    					{
;;;435                best_cpsr = cpsr;
;;;436                best_scr  = scr;
;;;437    						
;;;438                goto found_best;
;;;439              }
;;;440    					else
;;;441    						if ((((clk % (best_cpsr * (best_scr+1))) * 1024) / (best_cpsr * (best_scr+1))) >
;;;442    							(((clk % (cpsr * (scr+1))) * 1024) / (cpsr * (scr+1))))
;;;443    						{
;;;444    							best_cpsr = cpsr;
;;;445    							best_scr  = scr;
;;;446    						}
;;;447    found_best:
;;;448          ssp->reg->CPSR =  best_cpsr & SSP_CPSR_CPSDVSR_Msk;
;;;449          ssp->reg->CR0 &= ~SSP_CR0_SCR_Msk;
;;;450          ssp->reg->CR0 |= ((scr << 8) & SSP_CR0_SCR_Msk);
;;;451    						
;;;452          if ((control & ARM_SPI_CONTROL_Msk) == ARM_SPI_SET_BUS_SPEED)
;;;453    				return ARM_DRIVER_OK;
;;;454    			
;;;455    			break;
;;;456        case ARM_SPI_GET_BUS_SPEED:             // Get Bus Speed in bps
;;;457    			return (RTE_HCLK / ssp->clk.div /
;;;458    				((ssp->reg->CPSR & SSP_CPSR_CPSDVSR_Msk) * ((ssp->reg->CR0 & SSP_CR0_SCR_Msk) + 1)));
;;;459    			
;;;460        case ARM_SPI_SET_DEFAULT_TX_VALUE:      // Set default Transmit value; arg = value
;;;461    			ssp->xfer->def_val = (uint16_t)(arg & 0xFFFF);
;;;462    		
;;;463          return ARM_DRIVER_OK;
;;;464        case ARM_SPI_CONTROL_SS:                // Control Slave Select; arg = 0:inactive, 1:active
;;;465    			if (((ssp->info->mode & ARM_SPI_CONTROL_Msk) != ARM_SPI_MODE_MASTER) ||
;;;466    					((ssp->info->mode & ARM_SPI_SS_MASTER_MODE_Msk) != ARM_SPI_SS_MASTER_SW))
;;;467    				return ARM_DRIVER_ERROR;
;;;468    						
;;;469          if (ssp->pin.ssel_en == 0)
;;;470            return ARM_DRIVER_ERROR;
;;;471    				
;;;472          if (arg == ARM_SPI_SS_INACTIVE)
;;;473            PortPinWrite (ssp->pin.ssel_port, ssp->pin.ssel_bit, PORT_PIN_ON);
;;;474          else
;;;475            PortPinWrite (ssp->pin.ssel_port, ssp->pin.ssel_bit, PORT_PIN_OFF);
;;;476    			
;;;477    			return ARM_DRIVER_OK;
;;;478    	}
;;;479    	
;;;480    	if ((ssp->info->mode & ARM_SPI_CONTROL_Msk) == ARM_SPI_MODE_MASTER)
;;;481        switch (control & ARM_SPI_SS_MASTER_MODE_Msk)
;;;482    		{
;;;483          case ARM_SPI_SS_MASTER_UNUSED:        // SPI Slave Select when Master: Not used (default)
;;;484            if (ssp->pin.ssel_en == 1)
;;;485    					SSP_PinUnconfigure (ssp->pin.ssel_port, ssp->pin.ssel_bit);
;;;486    				
;;;487            ssp->info->mode &= ~ARM_SPI_SS_MASTER_MODE_Msk;
;;;488            ssp->info->mode |= ARM_SPI_SS_MASTER_UNUSED;
;;;489    				
;;;490            break;
;;;491          case ARM_SPI_SS_MASTER_HW_INPUT:      // SPI Slave Select when Master: Hardware monitored Input
;;;492            ssp->info->mode &= ~ARM_SPI_SS_MASTER_MODE_Msk;
;;;493    			
;;;494            return ARM_SPI_ERROR_SS_MODE;
;;;495          case ARM_SPI_SS_MASTER_SW:            // SPI Slave Select when Master: Software controlled
;;;496            ssp->info->mode &= ~ARM_SPI_SS_MASTER_MODE_Msk;
;;;497    			
;;;498            if (ssp->pin.ssel_en == 1)
;;;499    				{
;;;500    					PortPinConfigure (ssp->pin.ssel_port, ssp->pin.ssel_bit, PORT_PIN_OUT);
;;;501    					PortPinWrite (ssp->pin.ssel_port, ssp->pin.ssel_bit, PORT_PIN_ON);
;;;502    					
;;;503              ssp->info->mode |= ARM_SPI_SS_MASTER_SW;
;;;504            }
;;;505    				else
;;;506    					return ARM_SPI_ERROR_SS_MODE;
;;;507    				
;;;508            break;
;;;509          case ARM_SPI_SS_MASTER_HW_OUTPUT:     // SPI Slave Select when Master: Hardware controlled Output
;;;510            ssp->info->mode &= ~ARM_SPI_SS_MASTER_MODE_Msk;
;;;511    			
;;;512    				if (ssp->pin.ssel_en == 1)
;;;513    				{
;;;514              SSP_PinConfigure (ssp->pin.ssel_port, ssp->pin.ssel_bit, ssp->pin.ssel_func, PORT_PIN_OUT);
;;;515              ssp->info->mode |= ARM_SPI_SS_MASTER_HW_OUTPUT;
;;;516            }
;;;517    				else
;;;518    					return ARM_SPI_ERROR_SS_MODE;
;;;519        }
;;;520    		
;;;521    	if ((ssp->info->mode & ARM_SPI_CONTROL_Msk) == ARM_SPI_MODE_SLAVE)
;;;522        switch (control & ARM_SPI_SS_SLAVE_MODE_Msk)
;;;523    		{
;;;524          case ARM_SPI_SS_SLAVE_HW:             // SPI Slave Select when Slave: Hardware monitored (default)
;;;525            ssp->info->mode &= ~ARM_SPI_SS_SLAVE_MODE_Msk;
;;;526    			
;;;527            if (ssp->pin.ssel_en == 1)
;;;528    				{
;;;529              SSP_PinConfigure (ssp->pin.ssel_port, ssp->pin.ssel_bit, ssp->pin.ssel_func, PORT_PIN_IN);
;;;530              ssp->info->mode |= ARM_SPI_SS_SLAVE_HW;
;;;531            }
;;;532    				else
;;;533              return ARM_SPI_ERROR_SS_MODE;
;;;534    					
;;;535            break;
;;;536          case ARM_SPI_SS_SLAVE_SW:             // SPI Slave Select when Slave: Software controlled
;;;537            ssp->info->mode &= ~ARM_SPI_SS_SLAVE_MODE_Msk;
;;;538    			
;;;539            return ARM_SPI_ERROR_SS_MODE;
;;;540        }
;;;541    		
;;;542    	// Configure Frame Format
;;;543      switch (control & ARM_SPI_FRAME_FORMAT_Msk)
;;;544    	{
;;;545        case ARM_SPI_CPOL0_CPHA0:
;;;546          ssp->reg->CR0 &= ~SSP_CR0_FRF_Msk;
;;;547          ssp->reg->CR0 &= ~(SSP_CR0_SPO | SSP_CR0_SPH);
;;;548    		
;;;549          break;
;;;550        case ARM_SPI_CPOL0_CPHA1:
;;;551          ssp->reg->CR0 &= ~SSP_CR0_FRF_Msk;
;;;552          ssp->reg->CR0 &= ~SSP_CR0_SPO;
;;;553          ssp->reg->CR0 |=	SSP_CR0_SPH;
;;;554    		
;;;555          break;
;;;556        case ARM_SPI_CPOL1_CPHA0:
;;;557          ssp->reg->CR0 &= ~SSP_CR0_FRF_Msk;
;;;558          ssp->reg->CR0 |=	SSP_CR0_SPO;
;;;559          ssp->reg->CR0 &= ~SSP_CR0_SPH;
;;;560    		
;;;561          break;
;;;562        case ARM_SPI_CPOL1_CPHA1:
;;;563          ssp->reg->CR0 &= ~SSP_CR0_FRF_Msk;
;;;564          ssp->reg->CR0 |= (SSP_CR0_SPO | SSP_CR0_SPH);
;;;565    		
;;;566          break;
;;;567        case ARM_SPI_TI_SSI:
;;;568          ssp->reg->CR0 &= ~SSP_CR0_FRF_Msk;
;;;569    			ssp->reg->CR0 |= (SSP_CR0_FRF_SSI_TI << SSP_CR0_FRF_Pos);
;;;570    		
;;;571          break;
;;;572        case ARM_SPI_MICROWIRE:
;;;573          ssp->reg->CR0 &= ~SSP_CR0_FRF_Msk;
;;;574    			ssp->reg->CR0 |= (SSP_CR0_FRF_MW_NS << SSP_CR0_FRF_Pos);
;;;575    		
;;;576          break;
;;;577        default:
;;;578          return ARM_SPI_ERROR_FRAME_FORMAT;
;;;579      }
;;;580    
;;;581      // Configure Number of Data Bits
;;;582      data_bits = ((control & ARM_SPI_DATA_BITS_Msk) >> ARM_SPI_DATA_BITS_Pos);
;;;583    	
;;;584      if ((data_bits >= 4) && (data_bits <= 16))
;;;585    	{
;;;586    		ssp->reg->CR0 &= ~SSP_CR0_DSS_Msk;
;;;587    		ssp->reg->CR0 |= ((data_bits-1) << SSP_CR0_DSS_Pos);
;;;588    	}
;;;589    	else
;;;590    		return ARM_SPI_ERROR_DATA_BITS;
;;;591    
;;;592      // Configure Bit Order
;;;593      if ((control & ARM_SPI_BIT_ORDER_Msk) == ARM_SPI_LSB_MSB)
;;;594    		return ARM_SPI_ERROR_BIT_ORDER;
;;;595    
;;;596      return ARM_DRIVER_OK;
;;;597    }
000020  e8bd8ff8          POP      {r3-r11,pc}
                  |L15.36|
000024  b2e8              UXTB     r0,r5                 ;380
000026  2814              CMP      r0,#0x14              ;380
000028  d11a              BNE      |L15.96|
00002a  6820              LDR      r0,[r4,#0]            ;382
00002c  6840              LDR      r0,[r0,#4]            ;382
00002e  f0200002          BIC      r0,r0,#2              ;382
000032  6821              LDR      r1,[r4,#0]            ;382
000034  6048              STR      r0,[r1,#4]            ;382
000036  2118              MOVS     r1,#0x18              ;383
000038  6c20              LDR      r0,[r4,#0x40]         ;383
00003a  f7fffffe          BL       __aeabi_memclr4
00003e  2000              MOVS     r0,#0                 ;384
000040  6821              LDR      r1,[r4,#0]            ;384
000042  6148              STR      r0,[r1,#0x14]         ;384
000044  6be0              LDR      r0,[r4,#0x3c]         ;385
000046  6840              LDR      r0,[r0,#4]            ;385
000048  f0200001          BIC      r0,r0,#1              ;385
00004c  6be1              LDR      r1,[r4,#0x3c]         ;385
00004e  6048              STR      r0,[r1,#4]            ;385
000050  6820              LDR      r0,[r4,#0]            ;386
000052  6840              LDR      r0,[r0,#4]            ;386
000054  f0400002          ORR      r0,r0,#2              ;386
000058  6821              LDR      r1,[r4,#0]            ;386
00005a  6048              STR      r0,[r1,#4]            ;386
00005c  2000              MOVS     r0,#0                 ;388
00005e  e7df              B        |L15.32|
                  |L15.96|
000060  6be0              LDR      r0,[r4,#0x3c]         ;391
000062  7900              LDRB     r0,[r0,#4]            ;391
000064  f0000001          AND      r0,r0,#1              ;391
000068  b110              CBZ      r0,|L15.112|
00006a  f06f0001          MVN      r0,#1                 ;392
00006e  e7d7              B        |L15.32|
                  |L15.112|
000070  b2e8              UXTB     r0,r5                 ;394
000072  2804              CMP      r0,#4                 ;394
000074  d07b              BEQ      |L15.366|
000076  dc07              BGT      |L15.136|
000078  b188              CBZ      r0,|L15.158|
00007a  2801              CMP      r0,#1                 ;394
00007c  d027              BEQ      |L15.206|
00007e  2802              CMP      r0,#2                 ;394
000080  d04a              BEQ      |L15.280|
000082  2803              CMP      r0,#3                 ;394
000084  d108              BNE      |L15.152|
000086  e071              B        |L15.364|
                  |L15.136|
000088  2810              CMP      r0,#0x10              ;394
00008a  d073              BEQ      |L15.372|
00008c  2811              CMP      r0,#0x11              ;394
00008e  d06a              BEQ      |L15.358|
000090  2812              CMP      r0,#0x12              ;394
000092  d069              BEQ      |L15.360|
000094  2813              CMP      r0,#0x13              ;394
000096  d068              BEQ      |L15.362|
                  |L15.152|
000098  f06f0003          MVN      r0,#3                 ;397
00009c  e7c0              B        |L15.32|
                  |L15.158|
00009e  6820              LDR      r0,[r4,#0]            ;399
0000a0  6840              LDR      r0,[r0,#4]            ;399
0000a2  f0200002          BIC      r0,r0,#2              ;399
0000a6  6821              LDR      r1,[r4,#0]            ;399
0000a8  6048              STR      r0,[r1,#4]            ;399
0000aa  6be0              LDR      r0,[r4,#0x3c]         ;400
0000ac  68c0              LDR      r0,[r0,#0xc]          ;400
0000ae  f02000ff          BIC      r0,r0,#0xff           ;400
0000b2  6be1              LDR      r1,[r4,#0x3c]         ;400
0000b4  60c8              STR      r0,[r1,#0xc]          ;400
0000b6  6be0              LDR      r0,[r4,#0x3c]         ;401
0000b8  68c0              LDR      r0,[r0,#0xc]          ;401
0000ba  6be1              LDR      r1,[r4,#0x3c]         ;401
0000bc  60c8              STR      r0,[r1,#0xc]          ;401
0000be  6be0              LDR      r0,[r4,#0x3c]         ;402
0000c0  7a00              LDRB     r0,[r0,#8]            ;402
0000c2  f0200004          BIC      r0,r0,#4              ;402
0000c6  6be1              LDR      r1,[r4,#0x3c]         ;402
0000c8  7208              STRB     r0,[r1,#8]            ;402
0000ca  2000              MOVS     r0,#0                 ;404
0000cc  e7a8              B        |L15.32|
                  |L15.206|
0000ce  6820              LDR      r0,[r4,#0]            ;406
0000d0  6840              LDR      r0,[r0,#4]            ;406
0000d2  f0200002          BIC      r0,r0,#2              ;406
0000d6  6821              LDR      r1,[r4,#0]            ;406
0000d8  6048              STR      r0,[r1,#4]            ;406
0000da  6820              LDR      r0,[r4,#0]            ;407
0000dc  6840              LDR      r0,[r0,#4]            ;407
0000de  f0200004          BIC      r0,r0,#4              ;407
0000e2  6821              LDR      r1,[r4,#0]            ;407
0000e4  6048              STR      r0,[r1,#4]            ;407
0000e6  6be0              LDR      r0,[r4,#0x3c]         ;408
0000e8  68c0              LDR      r0,[r0,#0xc]          ;408
0000ea  f02000ff          BIC      r0,r0,#0xff           ;408
0000ee  6be1              LDR      r1,[r4,#0x3c]         ;408
0000f0  60c8              STR      r0,[r1,#0xc]          ;408
0000f2  6be0              LDR      r0,[r4,#0x3c]         ;409
0000f4  68c0              LDR      r0,[r0,#0xc]          ;409
0000f6  f0400001          ORR      r0,r0,#1              ;409
0000fa  6be1              LDR      r1,[r4,#0x3c]         ;409
0000fc  60c8              STR      r0,[r1,#0xc]          ;409
0000fe  6be0              LDR      r0,[r4,#0x3c]         ;410
000100  7a00              LDRB     r0,[r0,#8]            ;410
000102  f0400004          ORR      r0,r0,#4              ;410
000106  6be1              LDR      r1,[r4,#0x3c]         ;410
000108  7208              STRB     r0,[r1,#8]            ;410
00010a  6820              LDR      r0,[r4,#0]            ;411
00010c  6840              LDR      r0,[r0,#4]            ;411
00010e  f0400002          ORR      r0,r0,#2              ;411
000112  6821              LDR      r1,[r4,#0]            ;411
000114  6048              STR      r0,[r1,#4]            ;411
000116  e02e              B        |L15.374|
                  |L15.280|
000118  6820              LDR      r0,[r4,#0]            ;415
00011a  6840              LDR      r0,[r0,#4]            ;415
00011c  f0200002          BIC      r0,r0,#2              ;415
000120  6821              LDR      r1,[r4,#0]            ;415
000122  6048              STR      r0,[r1,#4]            ;415
000124  6820              LDR      r0,[r4,#0]            ;416
000126  6840              LDR      r0,[r0,#4]            ;416
000128  f0400004          ORR      r0,r0,#4              ;416
00012c  6821              LDR      r1,[r4,#0]            ;416
00012e  6048              STR      r0,[r1,#4]            ;416
000130  6be0              LDR      r0,[r4,#0x3c]         ;417
000132  68c0              LDR      r0,[r0,#0xc]          ;417
000134  f02000ff          BIC      r0,r0,#0xff           ;417
000138  6be1              LDR      r1,[r4,#0x3c]         ;417
00013a  60c8              STR      r0,[r1,#0xc]          ;417
00013c  6be0              LDR      r0,[r4,#0x3c]         ;418
00013e  68c0              LDR      r0,[r0,#0xc]          ;418
000140  f0400002          ORR      r0,r0,#2              ;418
000144  6be1              LDR      r1,[r4,#0x3c]         ;418
000146  60c8              STR      r0,[r1,#0xc]          ;418
000148  6be0              LDR      r0,[r4,#0x3c]         ;419
00014a  7a00              LDRB     r0,[r0,#8]            ;419
00014c  f0400004          ORR      r0,r0,#4              ;419
000150  6be1              LDR      r1,[r4,#0x3c]         ;419
000152  7208              STRB     r0,[r1,#8]            ;419
000154  6820              LDR      r0,[r4,#0]            ;420
000156  6840              LDR      r0,[r0,#4]            ;420
000158  f0400002          ORR      r0,r0,#2              ;420
00015c  6821              LDR      r1,[r4,#0]            ;420
00015e  6048              STR      r0,[r1,#4]            ;420
000160  e091              B        |L15.646|
000162  e004              B        |L15.366|
000164  e006              B        |L15.372|
                  |L15.358|
000166  e055              B        |L15.532|
                  |L15.360|
000168  e065              B        |L15.566|
                  |L15.362|
00016a  e069              B        |L15.576|
                  |L15.364|
00016c  bf00              NOP                            ;424
                  |L15.366|
00016e  f06f0006          MVN      r0,#6                 ;425
000172  e755              B        |L15.32|
                  |L15.372|
000174  bf00              NOP                            ;428
                  |L15.374|
000176  49d8              LDR      r1,|L15.1240|
000178  6b60              LDR      r0,[r4,#0x34]         ;429
00017a  fbb1f9f0          UDIV     r9,r1,r0              ;429
00017e  2602              MOVS     r6,#2                 ;431
000180  e02c              B        |L15.476|
                  |L15.386|
000182  2700              MOVS     r7,#0                 ;432
000184  e027              B        |L15.470|
                  |L15.390|
000186  fb08f006          MUL      r0,r8,r6              ;433
00018a  1c79              ADDS     r1,r7,#1              ;433
00018c  4348              MULS     r0,r1,r0              ;433
00018e  4548              CMP      r0,r9                 ;433
000190  d102              BNE      |L15.408|
000192  46b3              MOV      r11,r6                ;435
000194  9700              STR      r7,[sp,#0]            ;436
000196  e024              B        |L15.482|
                  |L15.408|
000198  9800              LDR      r0,[sp,#0]            ;441
00019a  1c40              ADDS     r0,r0,#1              ;441
00019c  fb0bf000          MUL      r0,r11,r0             ;441
0001a0  fbb9f1f0          UDIV     r1,r9,r0              ;441
0001a4  fb009011          MLS      r0,r0,r1,r9           ;441
0001a8  0281              LSLS     r1,r0,#10             ;441
0001aa  9800              LDR      r0,[sp,#0]            ;441
0001ac  1c40              ADDS     r0,r0,#1              ;441
0001ae  fb0bf000          MUL      r0,r11,r0             ;441
0001b2  fbb1f1f0          UDIV     r1,r1,r0              ;441
0001b6  1c78              ADDS     r0,r7,#1              ;441
0001b8  4370              MULS     r0,r6,r0              ;441
0001ba  fbb9f2f0          UDIV     r2,r9,r0              ;441
0001be  fb009012          MLS      r0,r0,r2,r9           ;441
0001c2  0282              LSLS     r2,r0,#10             ;441
0001c4  1c78              ADDS     r0,r7,#1              ;441
0001c6  4370              MULS     r0,r6,r0              ;441
0001c8  fbb2f0f0          UDIV     r0,r2,r0              ;441
0001cc  4281              CMP      r1,r0                 ;441
0001ce  d901              BLS      |L15.468|
0001d0  46b3              MOV      r11,r6                ;444
0001d2  9700              STR      r7,[sp,#0]            ;445
                  |L15.468|
0001d4  1c7f              ADDS     r7,r7,#1              ;432
                  |L15.470|
0001d6  2fff              CMP      r7,#0xff              ;432
0001d8  d9d5              BLS      |L15.390|
0001da  1cb6              ADDS     r6,r6,#2              ;431
                  |L15.476|
0001dc  2eff              CMP      r6,#0xff              ;431
0001de  d3d0              BCC      |L15.386|
0001e0  bf00              NOP                            ;447
                  |L15.482|
0001e2  f00b000f          AND      r0,r11,#0xf           ;448
0001e6  6821              LDR      r1,[r4,#0]            ;448
0001e8  6108              STR      r0,[r1,#0x10]         ;448
0001ea  6820              LDR      r0,[r4,#0]            ;449
0001ec  6800              LDR      r0,[r0,#0]            ;449
0001ee  f420407f          BIC      r0,r0,#0xff00         ;449
0001f2  6821              LDR      r1,[r4,#0]            ;449
0001f4  6008              STR      r0,[r1,#0]            ;449
0001f6  6820              LDR      r0,[r4,#0]            ;450
0001f8  6800              LDR      r0,[r0,#0]            ;450
0001fa  f44f417f          MOV      r1,#0xff00            ;450
0001fe  ea012107          AND      r1,r1,r7,LSL #8       ;450
000202  4308              ORRS     r0,r0,r1              ;450
000204  6821              LDR      r1,[r4,#0]            ;450
000206  6008              STR      r0,[r1,#0]            ;450
000208  b2e8              UXTB     r0,r5                 ;452
00020a  2810              CMP      r0,#0x10              ;452
00020c  d101              BNE      |L15.530|
00020e  2000              MOVS     r0,#0                 ;453
000210  e706              B        |L15.32|
                  |L15.530|
000212  e038              B        |L15.646|
                  |L15.532|
000214  49b0              LDR      r1,|L15.1240|
000216  6b60              LDR      r0,[r4,#0x34]         ;457
000218  fbb1f2f0          UDIV     r2,r1,r0              ;457
00021c  6820              LDR      r0,[r4,#0]            ;457
00021e  6900              LDR      r0,[r0,#0x10]         ;457
000220  f000000f          AND      r0,r0,#0xf            ;457
000224  6821              LDR      r1,[r4,#0]            ;457
000226  6809              LDR      r1,[r1,#0]            ;457
000228  f401417f          AND      r1,r1,#0xff00         ;457
00022c  1c49              ADDS     r1,r1,#1              ;457
00022e  4348              MULS     r0,r1,r0              ;457
000230  fbb2f0f0          UDIV     r0,r2,r0              ;457
000234  e6f4              B        |L15.32|
                  |L15.566|
000236  6c21              LDR      r1,[r4,#0x40]         ;461
000238  f8a18014          STRH     r8,[r1,#0x14]         ;461
00023c  2000              MOVS     r0,#0                 ;463
00023e  e6ef              B        |L15.32|
                  |L15.576|
000240  6be0              LDR      r0,[r4,#0x3c]         ;465
000242  7b00              LDRB     r0,[r0,#0xc]          ;465
000244  2801              CMP      r0,#1                 ;465
000246  d106              BNE      |L15.598|
000248  6be0              LDR      r0,[r4,#0x3c]         ;466
00024a  68c0              LDR      r0,[r0,#0xc]          ;466
00024c  f40010c0          AND      r0,r0,#0x180000       ;466
000250  f5b02f00          CMP      r0,#0x80000           ;466
000254  d002              BEQ      |L15.604|
                  |L15.598|
000256  f04f30ff          MOV      r0,#0xffffffff        ;467
00025a  e6e1              B        |L15.32|
                  |L15.604|
00025c  7920              LDRB     r0,[r4,#4]            ;469
00025e  b910              CBNZ     r0,|L15.614|
000260  f04f30ff          MOV      r0,#0xffffffff        ;470
000264  e6dc              B        |L15.32|
                  |L15.614|
000266  f1b80f00          CMP      r8,#0                 ;472
00026a  d105              BNE      |L15.632|
00026c  7b21              LDRB     r1,[r4,#0xc]          ;473
00026e  2201              MOVS     r2,#1                 ;473
000270  68a0              LDR      r0,[r4,#8]            ;473
000272  f7fffffe          BL       PortPinWrite
000276  e004              B        |L15.642|
                  |L15.632|
000278  7b21              LDRB     r1,[r4,#0xc]          ;475
00027a  2200              MOVS     r2,#0                 ;475
00027c  68a0              LDR      r0,[r4,#8]            ;475
00027e  f7fffffe          BL       PortPinWrite
                  |L15.642|
000282  2000              MOVS     r0,#0                 ;477
000284  e6cc              B        |L15.32|
                  |L15.646|
000286  bf00              NOP                            ;422
000288  6be0              LDR      r0,[r4,#0x3c]         ;480
00028a  7b00              LDRB     r0,[r0,#0xc]          ;480
00028c  2801              CMP      r0,#1                 ;480
00028e  d15f              BNE      |L15.848|
000290  f40510c0          AND      r0,r5,#0x180000       ;481
000294  b148              CBZ      r0,|L15.682|
000296  f5b02f00          CMP      r0,#0x80000           ;481
00029a  d021              BEQ      |L15.736|
00029c  f5b01f80          CMP      r0,#0x100000          ;481
0002a0  d03c              BEQ      |L15.796|
0002a2  f5b01fc0          CMP      r0,#0x180000          ;481
0002a6  d152              BNE      |L15.846|
0002a8  e011              B        |L15.718|
                  |L15.682|
0002aa  7920              LDRB     r0,[r4,#4]            ;484
0002ac  2801              CMP      r0,#1                 ;484
0002ae  d103              BNE      |L15.696|
0002b0  7b21              LDRB     r1,[r4,#0xc]          ;485
0002b2  68a0              LDR      r0,[r4,#8]            ;485
0002b4  f7fffffe          BL       SSP_PinUnconfigure
                  |L15.696|
0002b8  6be0              LDR      r0,[r4,#0x3c]         ;487
0002ba  68c0              LDR      r0,[r0,#0xc]          ;487
0002bc  f42010c0          BIC      r0,r0,#0x180000       ;487
0002c0  6be1              LDR      r1,[r4,#0x3c]         ;487
0002c2  60c8              STR      r0,[r1,#0xc]          ;487
0002c4  6be0              LDR      r0,[r4,#0x3c]         ;488
0002c6  68c0              LDR      r0,[r0,#0xc]          ;488
0002c8  6be1              LDR      r1,[r4,#0x3c]         ;488
0002ca  60c8              STR      r0,[r1,#0xc]          ;488
0002cc  e03f              B        |L15.846|
                  |L15.718|
0002ce  6be0              LDR      r0,[r4,#0x3c]         ;492
0002d0  68c0              LDR      r0,[r0,#0xc]          ;492
0002d2  f42010c0          BIC      r0,r0,#0x180000       ;492
0002d6  6be1              LDR      r1,[r4,#0x3c]         ;492
0002d8  60c8              STR      r0,[r1,#0xc]          ;492
0002da  f06f000a          MVN      r0,#0xa               ;494
0002de  e69f              B        |L15.32|
                  |L15.736|
0002e0  6be0              LDR      r0,[r4,#0x3c]         ;496
0002e2  68c0              LDR      r0,[r0,#0xc]          ;496
0002e4  f42010c0          BIC      r0,r0,#0x180000       ;496
0002e8  6be1              LDR      r1,[r4,#0x3c]         ;496
0002ea  60c8              STR      r0,[r1,#0xc]          ;496
0002ec  7920              LDRB     r0,[r4,#4]            ;498
0002ee  2801              CMP      r0,#1                 ;498
0002f0  d110              BNE      |L15.788|
0002f2  7b21              LDRB     r1,[r4,#0xc]          ;500
0002f4  2201              MOVS     r2,#1                 ;500
0002f6  68a0              LDR      r0,[r4,#8]            ;500
0002f8  f7fffffe          BL       PortPinConfigure
0002fc  7b21              LDRB     r1,[r4,#0xc]          ;501
0002fe  2201              MOVS     r2,#1                 ;501
000300  68a0              LDR      r0,[r4,#8]            ;501
000302  f7fffffe          BL       PortPinWrite
000306  6be0              LDR      r0,[r4,#0x3c]         ;503
000308  68c0              LDR      r0,[r0,#0xc]          ;503
00030a  f4402000          ORR      r0,r0,#0x80000        ;503
00030e  6be1              LDR      r1,[r4,#0x3c]         ;503
000310  60c8              STR      r0,[r1,#0xc]          ;503
000312  e002              B        |L15.794|
                  |L15.788|
000314  f06f000a          MVN      r0,#0xa               ;506
000318  e682              B        |L15.32|
                  |L15.794|
00031a  e018              B        |L15.846|
                  |L15.796|
00031c  6be0              LDR      r0,[r4,#0x3c]         ;510
00031e  68c0              LDR      r0,[r0,#0xc]          ;510
000320  f42010c0          BIC      r0,r0,#0x180000       ;510
000324  6be1              LDR      r1,[r4,#0x3c]         ;510
000326  60c8              STR      r0,[r1,#0xc]          ;510
000328  7920              LDRB     r0,[r4,#4]            ;512
00032a  2801              CMP      r0,#1                 ;512
00032c  d10c              BNE      |L15.840|
00032e  7b62              LDRB     r2,[r4,#0xd]          ;514
000330  7b21              LDRB     r1,[r4,#0xc]          ;514
000332  2301              MOVS     r3,#1                 ;514
000334  68a0              LDR      r0,[r4,#8]            ;514
000336  f7fffffe          BL       SSP_PinConfigure
00033a  6be0              LDR      r0,[r4,#0x3c]         ;515
00033c  68c0              LDR      r0,[r0,#0xc]          ;515
00033e  f4401080          ORR      r0,r0,#0x100000       ;515
000342  6be1              LDR      r1,[r4,#0x3c]         ;515
000344  60c8              STR      r0,[r1,#0xc]          ;515
000346  e002              B        |L15.846|
                  |L15.840|
000348  f06f000a          MVN      r0,#0xa               ;518
00034c  e668              B        |L15.32|
                  |L15.846|
00034e  bf00              NOP                            ;490
                  |L15.848|
000350  6be0              LDR      r0,[r4,#0x3c]         ;521
000352  7b00              LDRB     r0,[r0,#0xc]          ;521
000354  2802              CMP      r0,#2                 ;521
000356  d128              BNE      |L15.938|
000358  f4051000          AND      r0,r5,#0x200000       ;522
00035c  b118              CBZ      r0,|L15.870|
00035e  f5b01f00          CMP      r0,#0x200000          ;522
000362  d121              BNE      |L15.936|
000364  e017              B        |L15.918|
                  |L15.870|
000366  6be0              LDR      r0,[r4,#0x3c]         ;525
000368  68c0              LDR      r0,[r0,#0xc]          ;525
00036a  f4201000          BIC      r0,r0,#0x200000       ;525
00036e  6be1              LDR      r1,[r4,#0x3c]         ;525
000370  60c8              STR      r0,[r1,#0xc]          ;525
000372  7920              LDRB     r0,[r4,#4]            ;527
000374  2801              CMP      r0,#1                 ;527
000376  d10a              BNE      |L15.910|
000378  7b62              LDRB     r2,[r4,#0xd]          ;529
00037a  7b21              LDRB     r1,[r4,#0xc]          ;529
00037c  2300              MOVS     r3,#0                 ;529
00037e  68a0              LDR      r0,[r4,#8]            ;529
000380  f7fffffe          BL       SSP_PinConfigure
000384  6be0              LDR      r0,[r4,#0x3c]         ;530
000386  68c0              LDR      r0,[r0,#0xc]          ;530
000388  6be1              LDR      r1,[r4,#0x3c]         ;530
00038a  60c8              STR      r0,[r1,#0xc]          ;530
00038c  e002              B        |L15.916|
                  |L15.910|
00038e  f06f000a          MVN      r0,#0xa               ;533
000392  e645              B        |L15.32|
                  |L15.916|
000394  e008              B        |L15.936|
                  |L15.918|
000396  6be0              LDR      r0,[r4,#0x3c]         ;537
000398  68c0              LDR      r0,[r0,#0xc]          ;537
00039a  f4201000          BIC      r0,r0,#0x200000       ;537
00039e  6be1              LDR      r1,[r4,#0x3c]         ;537
0003a0  60c8              STR      r0,[r1,#0xc]          ;537
0003a2  f06f000a          MVN      r0,#0xa               ;539
0003a6  e63b              B        |L15.32|
                  |L15.936|
0003a8  bf00              NOP                            ;535
                  |L15.938|
0003aa  f40560e0          AND      r0,r5,#0x700          ;543
0003ae  f5b07f40          CMP      r0,#0x300             ;543
0003b2  d042              BEQ      |L15.1082|
0003b4  dc07              BGT      |L15.966|
0003b6  b168              CBZ      r0,|L15.980|
0003b8  f5b07f80          CMP      r0,#0x100             ;543
0003bc  d017              BEQ      |L15.1006|
0003be  f5b07f00          CMP      r0,#0x200             ;543
0003c2  d161              BNE      |L15.1160|
0003c4  e026              B        |L15.1044|
                  |L15.966|
0003c6  f5b06f80          CMP      r0,#0x400             ;543
0003ca  d043              BEQ      |L15.1108|
0003cc  f5b06fa0          CMP      r0,#0x500             ;543
0003d0  d15a              BNE      |L15.1160|
0003d2  e04c              B        |L15.1134|
                  |L15.980|
0003d4  6820              LDR      r0,[r4,#0]            ;546
0003d6  6800              LDR      r0,[r0,#0]            ;546
0003d8  f0200030          BIC      r0,r0,#0x30           ;546
0003dc  6821              LDR      r1,[r4,#0]            ;546
0003de  6008              STR      r0,[r1,#0]            ;546
0003e0  6820              LDR      r0,[r4,#0]            ;547
0003e2  6800              LDR      r0,[r0,#0]            ;547
0003e4  f02000c0          BIC      r0,r0,#0xc0           ;547
0003e8  6821              LDR      r1,[r4,#0]            ;547
0003ea  6008              STR      r0,[r1,#0]            ;547
0003ec  e04f              B        |L15.1166|
                  |L15.1006|
0003ee  6820              LDR      r0,[r4,#0]            ;551
0003f0  6800              LDR      r0,[r0,#0]            ;551
0003f2  f0200030          BIC      r0,r0,#0x30           ;551
0003f6  6821              LDR      r1,[r4,#0]            ;551
0003f8  6008              STR      r0,[r1,#0]            ;551
0003fa  6820              LDR      r0,[r4,#0]            ;552
0003fc  6800              LDR      r0,[r0,#0]            ;552
0003fe  f0200040          BIC      r0,r0,#0x40           ;552
000402  6821              LDR      r1,[r4,#0]            ;552
000404  6008              STR      r0,[r1,#0]            ;552
000406  6820              LDR      r0,[r4,#0]            ;553
000408  6800              LDR      r0,[r0,#0]            ;553
00040a  f0400080          ORR      r0,r0,#0x80           ;553
00040e  6821              LDR      r1,[r4,#0]            ;553
000410  6008              STR      r0,[r1,#0]            ;553
000412  e03c              B        |L15.1166|
                  |L15.1044|
000414  6820              LDR      r0,[r4,#0]            ;557
000416  6800              LDR      r0,[r0,#0]            ;557
000418  f0200030          BIC      r0,r0,#0x30           ;557
00041c  6821              LDR      r1,[r4,#0]            ;557
00041e  6008              STR      r0,[r1,#0]            ;557
000420  6820              LDR      r0,[r4,#0]            ;558
000422  6800              LDR      r0,[r0,#0]            ;558
000424  f0400040          ORR      r0,r0,#0x40           ;558
000428  6821              LDR      r1,[r4,#0]            ;558
00042a  6008              STR      r0,[r1,#0]            ;558
00042c  6820              LDR      r0,[r4,#0]            ;559
00042e  6800              LDR      r0,[r0,#0]            ;559
000430  f0200080          BIC      r0,r0,#0x80           ;559
000434  6821              LDR      r1,[r4,#0]            ;559
000436  6008              STR      r0,[r1,#0]            ;559
000438  e029              B        |L15.1166|
                  |L15.1082|
00043a  6820              LDR      r0,[r4,#0]            ;563
00043c  6800              LDR      r0,[r0,#0]            ;563
00043e  f0200030          BIC      r0,r0,#0x30           ;563
000442  6821              LDR      r1,[r4,#0]            ;563
000444  6008              STR      r0,[r1,#0]            ;563
000446  6820              LDR      r0,[r4,#0]            ;564
000448  6800              LDR      r0,[r0,#0]            ;564
00044a  f04000c0          ORR      r0,r0,#0xc0           ;564
00044e  6821              LDR      r1,[r4,#0]            ;564
000450  6008              STR      r0,[r1,#0]            ;564
000452  e01c              B        |L15.1166|
                  |L15.1108|
000454  6820              LDR      r0,[r4,#0]            ;568
000456  6800              LDR      r0,[r0,#0]            ;568
000458  f0200030          BIC      r0,r0,#0x30           ;568
00045c  6821              LDR      r1,[r4,#0]            ;568
00045e  6008              STR      r0,[r1,#0]            ;568
000460  6820              LDR      r0,[r4,#0]            ;569
000462  6800              LDR      r0,[r0,#0]            ;569
000464  f0400010          ORR      r0,r0,#0x10           ;569
000468  6821              LDR      r1,[r4,#0]            ;569
00046a  6008              STR      r0,[r1,#0]            ;569
00046c  e00f              B        |L15.1166|
                  |L15.1134|
00046e  6820              LDR      r0,[r4,#0]            ;573
000470  6800              LDR      r0,[r0,#0]            ;573
000472  f0200030          BIC      r0,r0,#0x30           ;573
000476  6821              LDR      r1,[r4,#0]            ;573
000478  6008              STR      r0,[r1,#0]            ;573
00047a  6820              LDR      r0,[r4,#0]            ;574
00047c  6800              LDR      r0,[r0,#0]            ;574
00047e  f0400020          ORR      r0,r0,#0x20           ;574
000482  6821              LDR      r1,[r4,#0]            ;574
000484  6008              STR      r0,[r1,#0]            ;574
000486  e002              B        |L15.1166|
                  |L15.1160|
000488  f06f0007          MVN      r0,#7                 ;578
00048c  e5c8              B        |L15.32|
                  |L15.1166|
00048e  bf00              NOP                            ;549
000490  f3c53a05          UBFX     r10,r5,#12,#6         ;582
000494  f1ba0f04          CMP      r10,#4                ;584
000498  d310              BCC      |L15.1212|
00049a  f1ba0f10          CMP      r10,#0x10             ;584
00049e  d80d              BHI      |L15.1212|
0004a0  6820              LDR      r0,[r4,#0]            ;586
0004a2  6800              LDR      r0,[r0,#0]            ;586
0004a4  f020000f          BIC      r0,r0,#0xf            ;586
0004a8  6821              LDR      r1,[r4,#0]            ;586
0004aa  6008              STR      r0,[r1,#0]            ;586
0004ac  6820              LDR      r0,[r4,#0]            ;587
0004ae  6800              LDR      r0,[r0,#0]            ;587
0004b0  f1aa0101          SUB      r1,r10,#1             ;587
0004b4  4308              ORRS     r0,r0,r1              ;587
0004b6  6821              LDR      r1,[r4,#0]            ;587
0004b8  6008              STR      r0,[r1,#0]            ;587
0004ba  e002              B        |L15.1218|
                  |L15.1212|
0004bc  f06f0008          MVN      r0,#8                 ;590
0004c0  e5ae              B        |L15.32|
                  |L15.1218|
0004c2  f4052080          AND      r0,r5,#0x40000        ;593
0004c6  f5b02f80          CMP      r0,#0x40000           ;593
0004ca  d102              BNE      |L15.1234|
0004cc  f06f0009          MVN      r0,#9                 ;594
0004d0  e5a6              B        |L15.32|
                  |L15.1234|
0004d2  2000              MOVS     r0,#0                 ;596
0004d4  e5a4              B        |L15.32|
;;;598    
                          ENDP

0004d6  0000              DCW      0x0000
                  |L15.1240|
                          DCD      0x04c4b400

                          AREA ||i.SSPx_GetDataCount||, CODE, READONLY, ALIGN=1

                  SSPx_GetDataCount PROC
;;;360    
;;;361    static uint32_t SSPx_GetDataCount (SSP_RESOURCES *ssp)
000000  4601              MOV      r1,r0
;;;362    {
;;;363    	if (!(ssp->info->state & SSP_CONFIGURED))
000002  6bc8              LDR      r0,[r1,#0x3c]
000004  7a00              LDRB     r0,[r0,#8]
000006  f0000004          AND      r0,r0,#4
00000a  b908              CBNZ     r0,|L16.16|
;;;364    		return 0;
00000c  2000              MOVS     r0,#0
                  |L16.14|
;;;365    	
;;;366    	if (ssp->xfer->rx_buf == NULL)	// If send operation
;;;367        return ssp->xfer->tx_cnt;
;;;368    	else														// If receive or transfer operation
;;;369        return ssp->xfer->rx_cnt;
;;;370    }
00000e  4770              BX       lr
                  |L16.16|
000010  6c08              LDR      r0,[r1,#0x40]         ;366
000012  6840              LDR      r0,[r0,#4]            ;366
000014  b910              CBNZ     r0,|L16.28|
000016  6c08              LDR      r0,[r1,#0x40]         ;367
000018  6900              LDR      r0,[r0,#0x10]         ;367
00001a  e7f8              B        |L16.14|
                  |L16.28|
00001c  6c08              LDR      r0,[r1,#0x40]         ;369
00001e  68c0              LDR      r0,[r0,#0xc]          ;369
000020  e7f5              B        |L16.14|
;;;371    
                          ENDP


                          AREA ||i.SSPx_GetStatus||, CODE, READONLY, ALIGN=1

                  SSPx_GetStatus PROC
;;;598    
;;;599    static ARM_SPI_STATUS SSPx_GetStatus (SSP_RESOURCES *ssp)
000000  4601              MOV      r1,r0
;;;600    {
;;;601    	return (ssp->info->status);
000002  6bc8              LDR      r0,[r1,#0x3c]
000004  6840              LDR      r0,[r0,#4]
;;;602    }
000006  4770              BX       lr
;;;603    
                          ENDP


                          AREA ||i.SSPx_IRQHandler||, CODE, READONLY, ALIGN=1

                  SSPx_IRQHandler PROC
;;;603    
;;;604    static void SSPx_IRQHandler (SSP_RESOURCES *ssp)
000000  b570              PUSH     {r4-r6,lr}
;;;605    {
000002  4604              MOV      r4,r0
;;;606      uint16_t data;
;;;607      uint32_t mis;
;;;608    
;;;609      mis = ssp->reg->MIS;
000004  6820              LDR      r0,[r4,#0]
000006  69c6              LDR      r6,[r0,#0x1c]
;;;610      ssp->reg->ICR = mis & (SSP_ICR_RORIC | SSP_ICR_RTIC);
000008  f0060003          AND      r0,r6,#3
00000c  6821              LDR      r1,[r4,#0]
00000e  6208              STR      r0,[r1,#0x20]
;;;611    																											// Handle transfer
;;;612      if ((ssp->reg->SR & SSP_SR_TNF) && (ssp->xfer->num > ssp->xfer->tx_cnt))
000010  6820              LDR      r0,[r4,#0]
000012  68c0              LDR      r0,[r0,#0xc]
000014  f0000002          AND      r0,r0,#2
000018  b330              CBZ      r0,|L18.104|
00001a  6c20              LDR      r0,[r4,#0x40]
00001c  6800              LDR      r0,[r0,#0]
00001e  6c21              LDR      r1,[r4,#0x40]
000020  6909              LDR      r1,[r1,#0x10]
000022  4288              CMP      r0,r1
000024  d920              BLS      |L18.104|
;;;613    	{
;;;614        if (ssp->xfer->tx_buf)
000026  6c20              LDR      r0,[r4,#0x40]
000028  6880              LDR      r0,[r0,#8]
00002a  b1a0              CBZ      r0,|L18.86|
;;;615    		{																									// If data available
;;;616          data = *(ssp->xfer->tx_buf++);
00002c  6c20              LDR      r0,[r4,#0x40]
00002e  6881              LDR      r1,[r0,#8]
000030  1c48              ADDS     r0,r1,#1
000032  6c22              LDR      r2,[r4,#0x40]
000034  6090              STR      r0,[r2,#8]
000036  780d              LDRB     r5,[r1,#0]
;;;617    			
;;;618          if ((ssp->reg->CR0 & SSP_CR0_DSS_Msk) > 7)			// If 9..16-bit data frame format
000038  6820              LDR      r0,[r4,#0]
00003a  6800              LDR      r0,[r0,#0]
00003c  f000000f          AND      r0,r0,#0xf
000040  2807              CMP      r0,#7
000042  d90a              BLS      |L18.90|
;;;619    				data |= *(ssp->xfer->tx_buf++) << 8;
000044  6c20              LDR      r0,[r4,#0x40]
000046  6881              LDR      r1,[r0,#8]
000048  1c48              ADDS     r0,r1,#1
00004a  6c22              LDR      r2,[r4,#0x40]
00004c  6090              STR      r0,[r2,#8]
00004e  7808              LDRB     r0,[r1,#0]
000050  ea452500          ORR      r5,r5,r0,LSL #8
000054  e001              B        |L18.90|
                  |L18.86|
;;;620        }
;;;621    		else																							// If default data send
;;;622          data = ssp->xfer->def_val;
000056  6c20              LDR      r0,[r4,#0x40]
000058  8a85              LDRH     r5,[r0,#0x14]
                  |L18.90|
;;;623    		
;;;624        ssp->reg->DR = data;															// Activate send
00005a  6820              LDR      r0,[r4,#0]
00005c  6085              STR      r5,[r0,#8]
;;;625        ssp->xfer->tx_cnt++;
00005e  6c20              LDR      r0,[r4,#0x40]
000060  6900              LDR      r0,[r0,#0x10]
000062  1c40              ADDS     r0,r0,#1
000064  6c21              LDR      r1,[r4,#0x40]
000066  6108              STR      r0,[r1,#0x10]
                  |L18.104|
;;;626      }
;;;627    
;;;628      while (ssp->reg->SR & SSP_SR_RNE)
000068  e03d              B        |L18.230|
                  |L18.106|
;;;629    	{
;;;630        data = ssp->reg->DR;															// Read data
00006a  6820              LDR      r0,[r4,#0]
00006c  6880              LDR      r0,[r0,#8]
00006e  b285              UXTH     r5,r0
;;;631    		
;;;632        if (ssp->xfer->num > ssp->xfer->rx_cnt)
000070  6c20              LDR      r0,[r4,#0x40]
000072  6800              LDR      r0,[r0,#0]
000074  6c21              LDR      r1,[r4,#0x40]
000076  68c9              LDR      r1,[r1,#0xc]
000078  4288              CMP      r0,r1
00007a  d934              BLS      |L18.230|
;;;633    		{
;;;634          if (ssp->xfer->rx_buf)
00007c  6c20              LDR      r0,[r4,#0x40]
00007e  6840              LDR      r0,[r0,#4]
000080  b190              CBZ      r0,|L18.168|
;;;635    			{
;;;636            *(ssp->xfer->rx_buf++) = (uint8_t)data;				// Put data into buffer
000082  6c20              LDR      r0,[r4,#0x40]
000084  6842              LDR      r2,[r0,#4]
000086  1c50              ADDS     r0,r2,#1
000088  6c23              LDR      r3,[r4,#0x40]
00008a  6058              STR      r0,[r3,#4]
00008c  7015              STRB     r5,[r2,#0]
;;;637    				
;;;638            if ((ssp->reg->CR0 & SSP_CR0_DSS_Msk) > 7)		// If 9..16-bit data frame format
00008e  6820              LDR      r0,[r4,#0]
000090  6800              LDR      r0,[r0,#0]
000092  f000000f          AND      r0,r0,#0xf
000096  2807              CMP      r0,#7
000098  d906              BLS      |L18.168|
;;;639              *(ssp->xfer->rx_buf++) = (uint8_t)(data >> 8);
00009a  1229              ASRS     r1,r5,#8
00009c  6c20              LDR      r0,[r4,#0x40]
00009e  6842              LDR      r2,[r0,#4]
0000a0  1c50              ADDS     r0,r2,#1
0000a2  6c23              LDR      r3,[r4,#0x40]
0000a4  6058              STR      r0,[r3,#4]
0000a6  7011              STRB     r1,[r2,#0]
                  |L18.168|
;;;640          }
;;;641    			
;;;642          ssp->xfer->rx_cnt++;
0000a8  6c20              LDR      r0,[r4,#0x40]
0000aa  68c0              LDR      r0,[r0,#0xc]
0000ac  1c40              ADDS     r0,r0,#1
0000ae  6c21              LDR      r1,[r4,#0x40]
0000b0  60c8              STR      r0,[r1,#0xc]
;;;643    			
;;;644          if (ssp->xfer->rx_cnt == ssp->xfer->num)
0000b2  6c20              LDR      r0,[r4,#0x40]
0000b4  68c0              LDR      r0,[r0,#0xc]
0000b6  6c21              LDR      r1,[r4,#0x40]
0000b8  6809              LDR      r1,[r1,#0]
0000ba  4288              CMP      r0,r1
0000bc  d113              BNE      |L18.230|
;;;645    			{																								// If all data received
;;;646            ssp->reg->IMSC &= ~(SSP_IMSC_TXIM | SSP_IMSC_RXIM | SSP_IMSC_RTIM | SSP_IMSC_RORIM);
0000be  6820              LDR      r0,[r4,#0]
0000c0  6940              LDR      r0,[r0,#0x14]
0000c2  f020000f          BIC      r0,r0,#0xf
0000c6  6821              LDR      r1,[r4,#0]
0000c8  6148              STR      r0,[r1,#0x14]
;;;647            ssp->info->status.busy = 0;
0000ca  6be0              LDR      r0,[r4,#0x3c]
0000cc  6840              LDR      r0,[r0,#4]
0000ce  f0200001          BIC      r0,r0,#1
0000d2  6be1              LDR      r1,[r4,#0x3c]
0000d4  6048              STR      r0,[r1,#4]
;;;648    				
;;;649            if (ssp->info->cb_event)
0000d6  6be0              LDR      r0,[r4,#0x3c]
0000d8  6800              LDR      r0,[r0,#0]
0000da  b118              CBZ      r0,|L18.228|
;;;650    					ssp->info->cb_event (ARM_SPI_EVENT_TRANSFER_COMPLETE);
0000dc  6be0              LDR      r0,[r4,#0x3c]
0000de  6801              LDR      r1,[r0,#0]
0000e0  2001              MOVS     r0,#1
0000e2  4788              BLX      r1
                  |L18.228|
;;;651    				
;;;652    				break;
0000e4  e005              B        |L18.242|
                  |L18.230|
0000e6  6820              LDR      r0,[r4,#0]            ;628
0000e8  68c0              LDR      r0,[r0,#0xc]          ;628
0000ea  f0000004          AND      r0,r0,#4              ;628
0000ee  2800              CMP      r0,#0                 ;628
0000f0  d1bb              BNE      |L18.106|
                  |L18.242|
0000f2  bf00              NOP      
;;;653          }
;;;654        }
;;;655      }
;;;656    
;;;657      if (mis & SSP_MIS_RORMIS)
0000f4  f0060001          AND      r0,r6,#1
0000f8  b168              CBZ      r0,|L18.278|
;;;658    	{																										// Handle errors
;;;659    																											// Overrun flag is set
;;;660        ssp->info->status.data_lost = 1;
0000fa  6be0              LDR      r0,[r4,#0x3c]
0000fc  6840              LDR      r0,[r0,#4]
0000fe  f0200002          BIC      r0,r0,#2
000102  1c80              ADDS     r0,r0,#2
000104  6be1              LDR      r1,[r4,#0x3c]
000106  6048              STR      r0,[r1,#4]
;;;661    		
;;;662        if (ssp->info->cb_event)
000108  6be0              LDR      r0,[r4,#0x3c]
00010a  6800              LDR      r0,[r0,#0]
00010c  b118              CBZ      r0,|L18.278|
;;;663    			ssp->info->cb_event (ARM_SPI_EVENT_DATA_LOST);
00010e  6be0              LDR      r0,[r4,#0x3c]
000110  6801              LDR      r1,[r0,#0]
000112  2002              MOVS     r0,#2
000114  4788              BLX      r1
                  |L18.278|
;;;664      }
;;;665    }
000116  bd70              POP      {r4-r6,pc}
;;;666    
                          ENDP


                          AREA ||i.SSPx_Initialize||, CODE, READONLY, ALIGN=1

                  SSPx_Initialize PROC
;;;169    
;;;170    static int32_t SSPx_Initialize (ARM_SPI_SignalEvent_t cb_event, SSP_RESOURCES *ssp)
000000  b570              PUSH     {r4-r6,lr}
;;;171    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;172    	if (ssp->info->state & SSP_INITIALIZED)
000006  6be0              LDR      r0,[r4,#0x3c]
000008  7a00              LDRB     r0,[r0,#8]
00000a  f0000001          AND      r0,r0,#1
00000e  b108              CBZ      r0,|L19.20|
;;;173    		return ARM_DRIVER_OK;
000010  2000              MOVS     r0,#0
                  |L19.18|
;;;174    	
;;;175      if (ssp->info->state & SSP_POWERED)
;;;176    		return ARM_DRIVER_ERROR;
;;;177    
;;;178      // Initialize SPI Run-Time Resources
;;;179      ssp->info->cb_event          = cb_event;
;;;180      ssp->info->status.busy       = 0;
;;;181      ssp->info->status.data_lost  = 0;
;;;182      ssp->info->status.mode_fault = 0;
;;;183    
;;;184      // Clear transfer information
;;;185      memset (ssp->xfer, 0, sizeof(SSP_TRANSFER_INFO));
;;;186    
;;;187      // Configure pins
;;;188    	ClkEnPort (ssp->pin.ssel_port);
;;;189    	ClkEnPort (ssp->pin.sck_port);
;;;190    	ClkEnPort (ssp->pin.mosi_port);
;;;191    	ClkEnPort (ssp->pin.miso_port);
;;;192    	
;;;193    	SSP_PinUnconfigure (ssp->pin.ssel_port, ssp->pin.ssel_bit);
;;;194    	SSP_PinConfigure (ssp->pin.sck_port, ssp->pin.sck_bit, ssp->pin.sck_func, PORT_PIN_OUT);
;;;195    	SSP_PinConfigure (ssp->pin.mosi_port, ssp->pin.mosi_bit, ssp->pin.mosi_func, PORT_PIN_OUT);
;;;196    	SSP_PinConfigure (ssp->pin.miso_port, ssp->pin.miso_bit, ssp->pin.miso_func, PORT_PIN_IN);
;;;197    
;;;198      ssp->info->state = SSP_INITIALIZED;   // SSP is initialized
;;;199    
;;;200      return ARM_DRIVER_OK;
;;;201    }
000012  bd70              POP      {r4-r6,pc}
                  |L19.20|
000014  6be0              LDR      r0,[r4,#0x3c]         ;175
000016  7a00              LDRB     r0,[r0,#8]            ;175
000018  f0000002          AND      r0,r0,#2              ;175
00001c  b110              CBZ      r0,|L19.36|
00001e  f04f30ff          MOV      r0,#0xffffffff        ;176
000022  e7f6              B        |L19.18|
                  |L19.36|
000024  6be0              LDR      r0,[r4,#0x3c]         ;179
000026  6005              STR      r5,[r0,#0]            ;179
000028  6be0              LDR      r0,[r4,#0x3c]         ;180
00002a  6840              LDR      r0,[r0,#4]            ;180
00002c  f0200001          BIC      r0,r0,#1              ;180
000030  6be1              LDR      r1,[r4,#0x3c]         ;180
000032  6048              STR      r0,[r1,#4]            ;180
000034  6be0              LDR      r0,[r4,#0x3c]         ;181
000036  6840              LDR      r0,[r0,#4]            ;181
000038  f0200002          BIC      r0,r0,#2              ;181
00003c  6be1              LDR      r1,[r4,#0x3c]         ;181
00003e  6048              STR      r0,[r1,#4]            ;181
000040  6be0              LDR      r0,[r4,#0x3c]         ;182
000042  6840              LDR      r0,[r0,#4]            ;182
000044  f0200004          BIC      r0,r0,#4              ;182
000048  6be1              LDR      r1,[r4,#0x3c]         ;182
00004a  6048              STR      r0,[r1,#4]            ;182
00004c  2118              MOVS     r1,#0x18              ;185
00004e  6c20              LDR      r0,[r4,#0x40]         ;185
000050  f7fffffe          BL       __aeabi_memclr4
000054  68a0              LDR      r0,[r4,#8]            ;188
000056  f7fffffe          BL       ClkEnPort
00005a  6920              LDR      r0,[r4,#0x10]         ;189
00005c  f7fffffe          BL       ClkEnPort
000060  6a20              LDR      r0,[r4,#0x20]         ;190
000062  f7fffffe          BL       ClkEnPort
000066  69a0              LDR      r0,[r4,#0x18]         ;191
000068  f7fffffe          BL       ClkEnPort
00006c  7b21              LDRB     r1,[r4,#0xc]          ;193
00006e  68a0              LDR      r0,[r4,#8]            ;193
000070  f7fffffe          BL       SSP_PinUnconfigure
000074  7d62              LDRB     r2,[r4,#0x15]         ;194
000076  7d21              LDRB     r1,[r4,#0x14]         ;194
000078  2301              MOVS     r3,#1                 ;194
00007a  6920              LDR      r0,[r4,#0x10]         ;194
00007c  f7fffffe          BL       SSP_PinConfigure
000080  f8942025          LDRB     r2,[r4,#0x25]         ;195
000084  f8941024          LDRB     r1,[r4,#0x24]         ;195
000088  2301              MOVS     r3,#1                 ;195
00008a  6a20              LDR      r0,[r4,#0x20]         ;195
00008c  f7fffffe          BL       SSP_PinConfigure
000090  7f62              LDRB     r2,[r4,#0x1d]         ;196
000092  7f21              LDRB     r1,[r4,#0x1c]         ;196
000094  2300              MOVS     r3,#0                 ;196
000096  69a0              LDR      r0,[r4,#0x18]         ;196
000098  f7fffffe          BL       SSP_PinConfigure
00009c  2001              MOVS     r0,#1                 ;198
00009e  6be1              LDR      r1,[r4,#0x3c]         ;198
0000a0  7208              STRB     r0,[r1,#8]            ;198
0000a2  2000              MOVS     r0,#0                 ;200
0000a4  e7b5              B        |L19.18|
;;;202    
                          ENDP


                          AREA ||i.SSPx_PowerControl||, CODE, READONLY, ALIGN=2

                  SSPx_PowerControl PROC
;;;223    
;;;224    static int32_t SSPx_PowerControl (ARM_POWER_STATE state, SSP_RESOURCES *ssp)
000000  b530              PUSH     {r4,r5,lr}
;;;225    {
000002  4602              MOV      r2,r0
;;;226    	if (!(ssp->info->state & SSP_INITIALIZED))
000004  6bc8              LDR      r0,[r1,#0x3c]
000006  7a00              LDRB     r0,[r0,#8]
000008  f0000001          AND      r0,r0,#1
00000c  b910              CBNZ     r0,|L20.20|
;;;227    		return ARM_DRIVER_ERROR;
00000e  f04f30ff          MOV      r0,#0xffffffff
                  |L20.18|
;;;228    	
;;;229      if (ssp->info->status.busy)
;;;230    		return ARM_DRIVER_ERROR_BUSY;
;;;231    	
;;;232      switch (state)
;;;233      {
;;;234    		case ARM_POWER_OFF:
;;;235    			if (ssp->info->state & SSP_POWERED)
;;;236    			{
;;;237            NVIC_DisableIRQ (ssp->irq_num);   // Disable SSP IRQ in NVIC
;;;238     
;;;239            ssp->reg->CR1 &= ~SSP_CR1_SSE;   // Disable SSP
;;;240    
;;;241            // Deactivate SSP peripheral clock
;;;242            *(ssp->clk.peri_cfg) &= ~(ssp->clk.peri_cfg_val);
;;;243    				MDR_RST_CLK->PER_CLOCK &= ~(ssp->clk.on_msk);
;;;244    				
;;;245    				ssp->info->state &= ~SSP_POWERED; // SSP is not powered
;;;246          }
;;;247    			
;;;248    			break;
;;;249    		case ARM_POWER_FULL:
;;;250    			if (!(ssp->info->state & SSP_POWERED))
;;;251    			{	
;;;252            // Activate SSP peripheral clock
;;;253    				MDR_RST_CLK->PER_CLOCK |= (ssp->clk.on_msk);
;;;254            *(ssp->clk.peri_cfg) |= (ssp->clk.peri_cfg_val);
;;;255    
;;;256            // Reset SSP peripheral
;;;257    				ssp->reg->CR0 = 0;
;;;258    				ssp->reg->CR1 = 0;
;;;259    				ssp->reg->DR = 0;
;;;260    				ssp->reg->CPSR = 0;
;;;261    				ssp->reg->DMACR = 0;
;;;262    
;;;263            ssp->reg->IMSC = 0;																// Disable SSP interrupts
;;;264            ssp->reg->ICR  = SSP_ICR_RORIC | SSP_ICR_RTIC;		// Clear SSP interrupts
;;;265    
;;;266            NVIC_ClearPendingIRQ (ssp->irq_num);
;;;267            NVIC_EnableIRQ (ssp->irq_num);    // Enable SSP IRQ in NVIC
;;;268    				
;;;269    				ssp->info->state |= SSP_POWERED; // SSP is powered
;;;270          }
;;;271    			
;;;272    			break;
;;;273    		default:
;;;274    			return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;275    	}
;;;276    	
;;;277    	return ARM_DRIVER_OK;
;;;278    }
000012  bd30              POP      {r4,r5,pc}
                  |L20.20|
000014  6bc8              LDR      r0,[r1,#0x3c]         ;229
000016  7900              LDRB     r0,[r0,#4]            ;229
000018  f0000001          AND      r0,r0,#1              ;229
00001c  b110              CBZ      r0,|L20.36|
00001e  f06f0001          MVN      r0,#1                 ;230
000022  e7f6              B        |L20.18|
                  |L20.36|
000024  b112              CBZ      r2,|L20.44|
000026  2a02              CMP      r2,#2                 ;232
000028  d169              BNE      |L20.254|
00002a  e028              B        |L20.126|
                  |L20.44|
00002c  6bc8              LDR      r0,[r1,#0x3c]         ;235
00002e  7a00              LDRB     r0,[r0,#8]            ;235
000030  f0000002          AND      r0,r0,#2              ;235
000034  b310              CBZ      r0,|L20.124|
000036  f9910038          LDRSB    r0,[r1,#0x38]         ;237
00003a  f000041f          AND      r4,r0,#0x1f           ;237
00003e  2301              MOVS     r3,#1                 ;237
000040  40a3              LSLS     r3,r3,r4              ;237
000042  4c32              LDR      r4,|L20.268|
000044  0945              LSRS     r5,r0,#5              ;237
000046  f8443025          STR      r3,[r4,r5,LSL #2]     ;237
00004a  bf00              NOP                            ;237
00004c  6808              LDR      r0,[r1,#0]            ;239
00004e  6840              LDR      r0,[r0,#4]            ;239
000050  f0200002          BIC      r0,r0,#2              ;239
000054  680b              LDR      r3,[r1,#0]            ;239
000056  6058              STR      r0,[r3,#4]            ;239
000058  6ac8              LDR      r0,[r1,#0x2c]         ;242
00005a  6800              LDR      r0,[r0,#0]            ;242
00005c  6a8b              LDR      r3,[r1,#0x28]         ;242
00005e  4398              BICS     r0,r0,r3              ;242
000060  6acb              LDR      r3,[r1,#0x2c]         ;242
000062  6018              STR      r0,[r3,#0]            ;242
000064  482a              LDR      r0,|L20.272|
000066  69c0              LDR      r0,[r0,#0x1c]         ;243
000068  6b0b              LDR      r3,[r1,#0x30]         ;243
00006a  4398              BICS     r0,r0,r3              ;243
00006c  4b28              LDR      r3,|L20.272|
00006e  61d8              STR      r0,[r3,#0x1c]         ;243
000070  6bc8              LDR      r0,[r1,#0x3c]         ;245
000072  7a00              LDRB     r0,[r0,#8]            ;245
000074  f0200002          BIC      r0,r0,#2              ;245
000078  6bcb              LDR      r3,[r1,#0x3c]         ;245
00007a  7218              STRB     r0,[r3,#8]            ;245
                  |L20.124|
00007c  e042              B        |L20.260|
                  |L20.126|
00007e  6bc8              LDR      r0,[r1,#0x3c]         ;250
000080  7a00              LDRB     r0,[r0,#8]            ;250
000082  f0000002          AND      r0,r0,#2              ;250
000086  bbc8              CBNZ     r0,|L20.252|
000088  4821              LDR      r0,|L20.272|
00008a  69c0              LDR      r0,[r0,#0x1c]         ;253
00008c  6b0b              LDR      r3,[r1,#0x30]         ;253
00008e  4318              ORRS     r0,r0,r3              ;253
000090  4b1f              LDR      r3,|L20.272|
000092  61d8              STR      r0,[r3,#0x1c]         ;253
000094  6ac8              LDR      r0,[r1,#0x2c]         ;254
000096  6800              LDR      r0,[r0,#0]            ;254
000098  6a8b              LDR      r3,[r1,#0x28]         ;254
00009a  4318              ORRS     r0,r0,r3              ;254
00009c  6acb              LDR      r3,[r1,#0x2c]         ;254
00009e  6018              STR      r0,[r3,#0]            ;254
0000a0  2000              MOVS     r0,#0                 ;257
0000a2  680b              LDR      r3,[r1,#0]            ;257
0000a4  6018              STR      r0,[r3,#0]            ;257
0000a6  680b              LDR      r3,[r1,#0]            ;258
0000a8  6058              STR      r0,[r3,#4]            ;258
0000aa  680b              LDR      r3,[r1,#0]            ;259
0000ac  6098              STR      r0,[r3,#8]            ;259
0000ae  680b              LDR      r3,[r1,#0]            ;260
0000b0  6118              STR      r0,[r3,#0x10]         ;260
0000b2  680b              LDR      r3,[r1,#0]            ;261
0000b4  6258              STR      r0,[r3,#0x24]         ;261
0000b6  680b              LDR      r3,[r1,#0]            ;263
0000b8  6158              STR      r0,[r3,#0x14]         ;263
0000ba  2003              MOVS     r0,#3                 ;264
0000bc  680b              LDR      r3,[r1,#0]            ;264
0000be  6218              STR      r0,[r3,#0x20]         ;264
0000c0  f9910038          LDRSB    r0,[r1,#0x38]         ;266
0000c4  f000041f          AND      r4,r0,#0x1f           ;266
0000c8  2301              MOVS     r3,#1                 ;266
0000ca  40a3              LSLS     r3,r3,r4              ;266
0000cc  4c11              LDR      r4,|L20.276|
0000ce  0945              LSRS     r5,r0,#5              ;266
0000d0  f8443025          STR      r3,[r4,r5,LSL #2]     ;266
0000d4  bf00              NOP                            ;266
0000d6  f9910038          LDRSB    r0,[r1,#0x38]         ;267
0000da  f000041f          AND      r4,r0,#0x1f           ;267
0000de  2301              MOVS     r3,#1                 ;267
0000e0  40a3              LSLS     r3,r3,r4              ;267
0000e2  0944              LSRS     r4,r0,#5              ;267
0000e4  00a4              LSLS     r4,r4,#2              ;267
0000e6  f10424e0          ADD      r4,r4,#0xe000e000     ;267
0000ea  f8c43100          STR      r3,[r4,#0x100]        ;267
0000ee  bf00              NOP                            ;267
0000f0  6bc8              LDR      r0,[r1,#0x3c]         ;269
0000f2  7a00              LDRB     r0,[r0,#8]            ;269
0000f4  f0400002          ORR      r0,r0,#2              ;269
0000f8  6bcb              LDR      r3,[r1,#0x3c]         ;269
0000fa  7218              STRB     r0,[r3,#8]            ;269
                  |L20.252|
0000fc  e002              B        |L20.260|
                  |L20.254|
0000fe  f06f0003          MVN      r0,#3                 ;274
000102  e786              B        |L20.18|
                  |L20.260|
000104  bf00              NOP                            ;248
000106  2000              MOVS     r0,#0                 ;277
000108  e783              B        |L20.18|
;;;279    
                          ENDP

00010a  0000              DCW      0x0000
                  |L20.268|
                          DCD      0xe000e180
                  |L20.272|
                          DCD      0x40020000
                  |L20.276|
                          DCD      0xe000e280

                          AREA ||i.SSPx_Receive||, CODE, READONLY, ALIGN=1

                  SSPx_Receive PROC
;;;306    
;;;307    static int32_t SSPx_Receive (void *data, uint32_t num, SSP_RESOURCES *ssp)
000000  b510              PUSH     {r4,lr}
;;;308    {
000002  4603              MOV      r3,r0
;;;309      if ((data == NULL) || (num == 0))
000004  b103              CBZ      r3,|L21.8|
000006  b911              CBNZ     r1,|L21.14|
                  |L21.8|
;;;310    		return ARM_DRIVER_ERROR_PARAMETER;
000008  f06f0004          MVN      r0,#4
                  |L21.12|
;;;311    	
;;;312      if (!(ssp->info->state & SSP_CONFIGURED))
;;;313    		return ARM_DRIVER_ERROR;
;;;314    	
;;;315      if (ssp->info->status.busy)
;;;316    		return ARM_DRIVER_ERROR_BUSY;
;;;317    	
;;;318      ssp->info->status.busy       = 1;
;;;319      ssp->info->status.data_lost  = 0;
;;;320      ssp->info->status.mode_fault = 0;
;;;321    
;;;322      ssp->xfer->rx_buf = (uint8_t *)data;
;;;323      ssp->xfer->tx_buf = NULL;
;;;324    
;;;325      ssp->xfer->num    = num;
;;;326      ssp->xfer->rx_cnt = 0;
;;;327      ssp->xfer->tx_cnt = 0;
;;;328    	
;;;329    	ssp->reg->IMSC = SSP_IMSC_TXIM | SSP_IMSC_RXIM | SSP_IMSC_RTIM | SSP_IMSC_RORIM;
;;;330    	
;;;331    	return ARM_DRIVER_OK;
;;;332    }
00000c  bd10              POP      {r4,pc}
                  |L21.14|
00000e  6bd0              LDR      r0,[r2,#0x3c]         ;312
000010  7a00              LDRB     r0,[r0,#8]            ;312
000012  f0000004          AND      r0,r0,#4              ;312
000016  b910              CBNZ     r0,|L21.30|
000018  f04f30ff          MOV      r0,#0xffffffff        ;313
00001c  e7f6              B        |L21.12|
                  |L21.30|
00001e  6bd0              LDR      r0,[r2,#0x3c]         ;315
000020  7900              LDRB     r0,[r0,#4]            ;315
000022  f0000001          AND      r0,r0,#1              ;315
000026  b110              CBZ      r0,|L21.46|
000028  f06f0001          MVN      r0,#1                 ;316
00002c  e7ee              B        |L21.12|
                  |L21.46|
00002e  6bd0              LDR      r0,[r2,#0x3c]         ;318
000030  6840              LDR      r0,[r0,#4]            ;318
000032  f0200001          BIC      r0,r0,#1              ;318
000036  1c40              ADDS     r0,r0,#1              ;318
000038  6bd4              LDR      r4,[r2,#0x3c]         ;318
00003a  6060              STR      r0,[r4,#4]            ;318
00003c  6bd0              LDR      r0,[r2,#0x3c]         ;319
00003e  6840              LDR      r0,[r0,#4]            ;319
000040  f0200002          BIC      r0,r0,#2              ;319
000044  6bd4              LDR      r4,[r2,#0x3c]         ;319
000046  6060              STR      r0,[r4,#4]            ;319
000048  6bd0              LDR      r0,[r2,#0x3c]         ;320
00004a  6840              LDR      r0,[r0,#4]            ;320
00004c  f0200004          BIC      r0,r0,#4              ;320
000050  6bd4              LDR      r4,[r2,#0x3c]         ;320
000052  6060              STR      r0,[r4,#4]            ;320
000054  6c10              LDR      r0,[r2,#0x40]         ;322
000056  6043              STR      r3,[r0,#4]            ;322
000058  2000              MOVS     r0,#0                 ;323
00005a  6c14              LDR      r4,[r2,#0x40]         ;323
00005c  60a0              STR      r0,[r4,#8]            ;323
00005e  6c10              LDR      r0,[r2,#0x40]         ;325
000060  6001              STR      r1,[r0,#0]            ;325
000062  2000              MOVS     r0,#0                 ;326
000064  6c14              LDR      r4,[r2,#0x40]         ;326
000066  60e0              STR      r0,[r4,#0xc]          ;326
000068  6c14              LDR      r4,[r2,#0x40]         ;327
00006a  6120              STR      r0,[r4,#0x10]         ;327
00006c  200f              MOVS     r0,#0xf               ;329
00006e  6814              LDR      r4,[r2,#0]            ;329
000070  6160              STR      r0,[r4,#0x14]         ;329
000072  2000              MOVS     r0,#0                 ;331
000074  e7ca              B        |L21.12|
;;;333    
                          ENDP


                          AREA ||i.SSPx_Send||, CODE, READONLY, ALIGN=1

                  SSPx_Send PROC
;;;279    
;;;280    static int32_t SSPx_Send (const void *data, uint32_t num, SSP_RESOURCES *ssp)
000000  b510              PUSH     {r4,lr}
;;;281    {
000002  4603              MOV      r3,r0
;;;282    	if ((data == NULL) || (num == 0))
000004  b103              CBZ      r3,|L22.8|
000006  b911              CBNZ     r1,|L22.14|
                  |L22.8|
;;;283    		return ARM_DRIVER_ERROR_PARAMETER;
000008  f06f0004          MVN      r0,#4
                  |L22.12|
;;;284    	
;;;285      if (!(ssp->info->state & SSP_CONFIGURED))
;;;286    		return ARM_DRIVER_ERROR;
;;;287    	
;;;288      if (ssp->info->status.busy)
;;;289    		return ARM_DRIVER_ERROR_BUSY;
;;;290    	
;;;291      ssp->info->status.busy       = 1;
;;;292      ssp->info->status.data_lost  = 0;
;;;293      ssp->info->status.mode_fault = 0;
;;;294    
;;;295      ssp->xfer->rx_buf = NULL;
;;;296      ssp->xfer->tx_buf = (uint8_t *)data;
;;;297    
;;;298      ssp->xfer->num    = num;
;;;299      ssp->xfer->rx_cnt = 0;
;;;300      ssp->xfer->tx_cnt = 0;
;;;301    	
;;;302    	ssp->reg->IMSC = SSP_IMSC_TXIM | SSP_IMSC_RXIM | SSP_IMSC_RTIM | SSP_IMSC_RORIM;
;;;303    	
;;;304    	return ARM_DRIVER_OK;
;;;305    }
00000c  bd10              POP      {r4,pc}
                  |L22.14|
00000e  6bd0              LDR      r0,[r2,#0x3c]         ;285
000010  7a00              LDRB     r0,[r0,#8]            ;285
000012  f0000004          AND      r0,r0,#4              ;285
000016  b910              CBNZ     r0,|L22.30|
000018  f04f30ff          MOV      r0,#0xffffffff        ;286
00001c  e7f6              B        |L22.12|
                  |L22.30|
00001e  6bd0              LDR      r0,[r2,#0x3c]         ;288
000020  7900              LDRB     r0,[r0,#4]            ;288
000022  f0000001          AND      r0,r0,#1              ;288
000026  b110              CBZ      r0,|L22.46|
000028  f06f0001          MVN      r0,#1                 ;289
00002c  e7ee              B        |L22.12|
                  |L22.46|
00002e  6bd0              LDR      r0,[r2,#0x3c]         ;291
000030  6840              LDR      r0,[r0,#4]            ;291
000032  f0200001          BIC      r0,r0,#1              ;291
000036  1c40              ADDS     r0,r0,#1              ;291
000038  6bd4              LDR      r4,[r2,#0x3c]         ;291
00003a  6060              STR      r0,[r4,#4]            ;291
00003c  6bd0              LDR      r0,[r2,#0x3c]         ;292
00003e  6840              LDR      r0,[r0,#4]            ;292
000040  f0200002          BIC      r0,r0,#2              ;292
000044  6bd4              LDR      r4,[r2,#0x3c]         ;292
000046  6060              STR      r0,[r4,#4]            ;292
000048  6bd0              LDR      r0,[r2,#0x3c]         ;293
00004a  6840              LDR      r0,[r0,#4]            ;293
00004c  f0200004          BIC      r0,r0,#4              ;293
000050  6bd4              LDR      r4,[r2,#0x3c]         ;293
000052  6060              STR      r0,[r4,#4]            ;293
000054  2000              MOVS     r0,#0                 ;295
000056  6c14              LDR      r4,[r2,#0x40]         ;295
000058  6060              STR      r0,[r4,#4]            ;295
00005a  6c10              LDR      r0,[r2,#0x40]         ;296
00005c  6083              STR      r3,[r0,#8]            ;296
00005e  6c10              LDR      r0,[r2,#0x40]         ;298
000060  6001              STR      r1,[r0,#0]            ;298
000062  2000              MOVS     r0,#0                 ;299
000064  6c14              LDR      r4,[r2,#0x40]         ;299
000066  60e0              STR      r0,[r4,#0xc]          ;299
000068  6c14              LDR      r4,[r2,#0x40]         ;300
00006a  6120              STR      r0,[r4,#0x10]         ;300
00006c  200f              MOVS     r0,#0xf               ;302
00006e  6814              LDR      r4,[r2,#0]            ;302
000070  6160              STR      r0,[r4,#0x14]         ;302
000072  2000              MOVS     r0,#0                 ;304
000074  e7ca              B        |L22.12|
;;;306    
                          ENDP


                          AREA ||i.SSPx_Transfer||, CODE, READONLY, ALIGN=1

                  SSPx_Transfer PROC
;;;333    
;;;334    static int32_t SSPx_Transfer (const void *data_out, void *data_in, uint32_t num, SSP_RESOURCES *ssp)
000000  b530              PUSH     {r4,r5,lr}
;;;335    {
000002  4604              MOV      r4,r0
;;;336    	if ((data_out == NULL) || (data_in == NULL) || (num == 0))
000004  b10c              CBZ      r4,|L23.10|
000006  b101              CBZ      r1,|L23.10|
000008  b912              CBNZ     r2,|L23.16|
                  |L23.10|
;;;337    		return ARM_DRIVER_ERROR_PARAMETER;
00000a  f06f0004          MVN      r0,#4
                  |L23.14|
;;;338    	
;;;339      if (!(ssp->info->state & SSP_CONFIGURED))
;;;340    		return ARM_DRIVER_ERROR;
;;;341    	
;;;342      if (ssp->info->status.busy)
;;;343    		return ARM_DRIVER_ERROR_BUSY;
;;;344    	
;;;345      ssp->info->status.busy       = 1;
;;;346      ssp->info->status.data_lost  = 0;
;;;347      ssp->info->status.mode_fault = 0;
;;;348    
;;;349      ssp->xfer->rx_buf = (uint8_t *)data_in;
;;;350      ssp->xfer->tx_buf = (uint8_t *)data_out;
;;;351    
;;;352      ssp->xfer->num    = num;
;;;353      ssp->xfer->rx_cnt = 0;
;;;354      ssp->xfer->tx_cnt = 0;
;;;355    	
;;;356    	ssp->reg->IMSC = SSP_IMSC_TXIM | SSP_IMSC_RXIM | SSP_IMSC_RTIM | SSP_IMSC_RORIM;
;;;357    	
;;;358    	return ARM_DRIVER_OK;
;;;359    }
00000e  bd30              POP      {r4,r5,pc}
                  |L23.16|
000010  6bd8              LDR      r0,[r3,#0x3c]         ;339
000012  7a00              LDRB     r0,[r0,#8]            ;339
000014  f0000004          AND      r0,r0,#4              ;339
000018  b910              CBNZ     r0,|L23.32|
00001a  f04f30ff          MOV      r0,#0xffffffff        ;340
00001e  e7f6              B        |L23.14|
                  |L23.32|
000020  6bd8              LDR      r0,[r3,#0x3c]         ;342
000022  7900              LDRB     r0,[r0,#4]            ;342
000024  f0000001          AND      r0,r0,#1              ;342
000028  b110              CBZ      r0,|L23.48|
00002a  f06f0001          MVN      r0,#1                 ;343
00002e  e7ee              B        |L23.14|
                  |L23.48|
000030  6bd8              LDR      r0,[r3,#0x3c]         ;345
000032  6840              LDR      r0,[r0,#4]            ;345
000034  f0200001          BIC      r0,r0,#1              ;345
000038  1c40              ADDS     r0,r0,#1              ;345
00003a  6bdd              LDR      r5,[r3,#0x3c]         ;345
00003c  6068              STR      r0,[r5,#4]            ;345
00003e  6bd8              LDR      r0,[r3,#0x3c]         ;346
000040  6840              LDR      r0,[r0,#4]            ;346
000042  f0200002          BIC      r0,r0,#2              ;346
000046  6bdd              LDR      r5,[r3,#0x3c]         ;346
000048  6068              STR      r0,[r5,#4]            ;346
00004a  6bd8              LDR      r0,[r3,#0x3c]         ;347
00004c  6840              LDR      r0,[r0,#4]            ;347
00004e  f0200004          BIC      r0,r0,#4              ;347
000052  6bdd              LDR      r5,[r3,#0x3c]         ;347
000054  6068              STR      r0,[r5,#4]            ;347
000056  6c18              LDR      r0,[r3,#0x40]         ;349
000058  6041              STR      r1,[r0,#4]            ;349
00005a  6c18              LDR      r0,[r3,#0x40]         ;350
00005c  6084              STR      r4,[r0,#8]            ;350
00005e  6c18              LDR      r0,[r3,#0x40]         ;352
000060  6002              STR      r2,[r0,#0]            ;352
000062  2000              MOVS     r0,#0                 ;353
000064  6c1d              LDR      r5,[r3,#0x40]         ;353
000066  60e8              STR      r0,[r5,#0xc]          ;353
000068  6c1d              LDR      r5,[r3,#0x40]         ;354
00006a  6128              STR      r0,[r5,#0x10]         ;354
00006c  200f              MOVS     r0,#0xf               ;356
00006e  681d              LDR      r5,[r3,#0]            ;356
000070  6168              STR      r0,[r5,#0x14]         ;356
000072  2000              MOVS     r0,#0                 ;358
000074  e7cb              B        |L23.14|
;;;360    
                          ENDP


                          AREA ||i.SSPx_Uninitialize||, CODE, READONLY, ALIGN=1

                  SSPx_Uninitialize PROC
;;;202    
;;;203    static int32_t SSPx_Uninitialize (SSP_RESOURCES *ssp)
000000  b510              PUSH     {r4,lr}
;;;204    {
000002  4604              MOV      r4,r0
;;;205    	if (!(ssp->info->state & SSP_INITIALIZED))
000004  6be0              LDR      r0,[r4,#0x3c]
000006  7a00              LDRB     r0,[r0,#8]
000008  f0000001          AND      r0,r0,#1
00000c  b908              CBNZ     r0,|L24.18|
;;;206    		return ARM_DRIVER_OK;
00000e  2000              MOVS     r0,#0
                  |L24.16|
;;;207    	
;;;208      if (ssp->info->state & SSP_POWERED)
;;;209    		return ARM_DRIVER_ERROR;
;;;210    
;;;211      // Unconfigure pins
;;;212    	if (ssp->pin.ssel_en == 1)
;;;213    		SSP_PinUnconfigure (ssp->pin.ssel_port, ssp->pin.ssel_bit);
;;;214    	
;;;215    	SSP_PinUnconfigure (ssp->pin.sck_port, ssp->pin.sck_bit);
;;;216    	SSP_PinUnconfigure (ssp->pin.mosi_port, ssp->pin.mosi_bit);
;;;217    	SSP_PinUnconfigure (ssp->pin.miso_port, ssp->pin.miso_bit);
;;;218    
;;;219      ssp->info->state = 0;                 // SSP is uninitialized
;;;220    
;;;221      return ARM_DRIVER_OK;
;;;222    }
000010  bd10              POP      {r4,pc}
                  |L24.18|
000012  6be0              LDR      r0,[r4,#0x3c]         ;208
000014  7a00              LDRB     r0,[r0,#8]            ;208
000016  f0000002          AND      r0,r0,#2              ;208
00001a  b110              CBZ      r0,|L24.34|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;209
000020  e7f6              B        |L24.16|
                  |L24.34|
000022  7920              LDRB     r0,[r4,#4]            ;212
000024  2801              CMP      r0,#1                 ;212
000026  d103              BNE      |L24.48|
000028  7b21              LDRB     r1,[r4,#0xc]          ;213
00002a  68a0              LDR      r0,[r4,#8]            ;213
00002c  f7fffffe          BL       SSP_PinUnconfigure
                  |L24.48|
000030  7d21              LDRB     r1,[r4,#0x14]         ;215
000032  6920              LDR      r0,[r4,#0x10]         ;215
000034  f7fffffe          BL       SSP_PinUnconfigure
000038  f8941024          LDRB     r1,[r4,#0x24]         ;216
00003c  6a20              LDR      r0,[r4,#0x20]         ;216
00003e  f7fffffe          BL       SSP_PinUnconfigure
000042  7f21              LDRB     r1,[r4,#0x1c]         ;217
000044  69a0              LDR      r0,[r4,#0x18]         ;217
000046  f7fffffe          BL       SSP_PinUnconfigure
00004a  2000              MOVS     r0,#0                 ;219
00004c  6be1              LDR      r1,[r4,#0x3c]         ;219
00004e  7208              STRB     r0,[r1,#8]            ;219
000050  bf00              NOP                            ;221
000052  e7dd              B        |L24.16|
;;;223    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  SSP0_Info
                          %        16
                  SSP0_Xfer
                          %        24

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  SSP0_Resources
                          DCD      0x40040000
000004  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x400e8000
00000c  02020000          DCB      0x02,0x02,0x00,0x00
                          DCD      0x400e8000
000014  01020000          DCB      0x01,0x02,0x00,0x00
                          DCD      0x400e8000
00001c  03020000          DCB      0x03,0x02,0x00,0x00
                          DCD      0x400e8000
000024  00020000          DCB      0x00,0x02,0x00,0x00
                          DCD      0x01000001
                          DCD      0x4002002c
                          DCD      0x00000100
                          DCD      0x00000002
000038  08000000          DCB      0x08,0x00,0x00,0x00
                          DCD      SSP0_Info
                          DCD      SSP0_Xfer
                  DriverVersion
000044  02010100          DCW      0x0201,0x0100
                  DriverCapabilities
000048  06000000          DCB      0x06,0x00,0x00,0x00
                  Driver_SPI0
                          DCD      SSP_GetVersion
                          DCD      SSP_GetCapabilities
                          DCD      SSP0_Initialize
                          DCD      SSP0_Uninitialize
                          DCD      SSP0_PowerControl
                          DCD      SSP0_Send
                          DCD      SSP0_Receive
                          DCD      SSP0_Transfer
                          DCD      SSP0_GetDataCount
                          DCD      SSP0_Control
                          DCD      SSP0_GetStatus

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Keil\\MDR1986BExx\\1.4\\CMSIS_Driver\\MDR1986VE9X\\MDR1986VE9X_SPI.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_MDR1986VE9X_SPI_c_e83bfe97____REV16|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_MDR1986VE9X_SPI_c_e83bfe97____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_MDR1986VE9X_SPI_c_e83bfe97____REVSH|
#line 153
|__asm___17_MDR1986VE9X_SPI_c_e83bfe97____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_MDR1986VE9X_SPI_c_e83bfe97____RRX|
#line 328
|__asm___17_MDR1986VE9X_SPI_c_e83bfe97____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
