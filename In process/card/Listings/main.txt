; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -ID:\Keil555\1986VE9X\card\RTE -ID:\Keil555\1986VE9X\card\RTE\Device\MDR1986BE93 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Driver\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\RTOS\RTX\INC -IC:\Keil_v5\ARM\PACK\Keil\MDK-Middleware\6.5.0\FileSystem\Include -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\CMSIS_Driver\MDR1986VE9X -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Config -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\CoreSupport -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -D__RTX -D__UVISION_VERSION=516 -D_RTE_ -DUSE_MDR32F9Q3_Rev1 --signed_chars --omf_browse=.\objects\main.crf Source\main.c]
                          THUMB

                          AREA ||i.ClkSetup||, CODE, READONLY, ALIGN=2

                  ClkSetup PROC
;;;10     
;;;11     void ClkSetup (void)
000000  2010              MOVS     r0,#0x10
;;;12     {
;;;13     	MDR_RST_CLK->PER_CLOCK = RST_CLK_PER_CLOCK_PCLK_EN_RST_CLK;
000002  4912              LDR      r1,|L1.76|
000004  61c8              STR      r0,[r1,#0x1c]
;;;14     	
;;;15     	MDR_RST_CLK->HS_CONTROL =
000006  2001              MOVS     r0,#1
000008  6088              STR      r0,[r1,#8]
;;;16     		(1 << RST_CLK_HS_CONTROL_HSE_ON_Pos) |
;;;17     		(0 << RST_CLK_HS_CONTROL_HSE_BYP_Pos);
;;;18     	
;;;19     	while (CHF_BIT_PER (MDR_RST_CLK->CLOCK_STATUS, RST_CLK_CLOCK_STATUS_HSE_RDY_Pos));
00000a  bf00              NOP      
                  |L1.12|
00000c  4810              LDR      r0,|L1.80|
00000e  6880              LDR      r0,[r0,#8]
000010  2800              CMP      r0,#0
000012  d0fb              BEQ      |L1.12|
;;;20     	
;;;21     	MDR_RST_CLK->CPU_CLOCK =
000014  2002              MOVS     r0,#2
000016  490d              LDR      r1,|L1.76|
000018  60c8              STR      r0,[r1,#0xc]
;;;22     		(RST_CLK_CPU_CLOCK_CPU_C1_SEL_HSE << RST_CLK_CPU_CLOCK_CPU_C1_SEL_Pos) |
;;;23     		(RST_CLK_CPU_CLOCK_CPU_C2_SEL_CPU_C1 << RST_CLK_CPU_CLOCK_CPU_C2_SEL_Pos) |
;;;24     		(RST_CLK_CPU_CLOCK_CPU_C3_SEL_CPU_C2 << RST_CLK_CPU_CLOCK_CPU_C3_SEL_Pos) |
;;;25     		(RST_CLK_CPU_CLOCK_HCLK_SEL_HSI << RST_CLK_CPU_CLOCK_HCLK_SEL_Pos);
;;;26     	
;;;27     	MDR_RST_CLK->PLL_CONTROL =
00001a  f44f6010          MOV      r0,#0x900
00001e  6048              STR      r0,[r1,#4]
;;;28     		(0 << RST_CLK_PLL_CONTROL_PLL_USB_ON_Pos) |
;;;29     		(0 << RST_CLK_PLL_CONTROL_PLL_USB_RLD_Pos) |
;;;30     		(0 << RST_CLK_PLL_CONTROL_PLL_CPU_ON_Pos) |
;;;31     		(0 << RST_CLK_PLL_CONTROL_PLL_CPU_PLD_Pos) |
;;;32     		(0 << RST_CLK_PLL_CONTROL_PLL_USB_MUL_Pos) |
;;;33     		(RST_CLK_PLL_CONTROL_PLL_CPU_MUL << RST_CLK_PLL_CONTROL_PLL_CPU_MUL_Pos);
;;;34     	
;;;35     	SET_BIT_PER (MDR_RST_CLK->PLL_CONTROL, RST_CLK_PLL_CONTROL_PLL_CPU_ON_Pos);
000020  2001              MOVS     r0,#1
000022  490b              LDR      r1,|L1.80|
000024  3188              ADDS     r1,r1,#0x88
000026  6008              STR      r0,[r1,#0]
;;;36     	
;;;37     	SET_BIT_PER (MDR_RST_CLK->PLL_CONTROL, RST_CLK_PLL_CONTROL_PLL_CPU_PLD_Pos);
000028  4909              LDR      r1,|L1.80|
00002a  f8c1008c          STR      r0,[r1,#0x8c]
;;;38     	CLR_BIT_PER (MDR_RST_CLK->PLL_CONTROL, RST_CLK_PLL_CONTROL_PLL_CPU_PLD_Pos);
00002e  2000              MOVS     r0,#0
000030  4907              LDR      r1,|L1.80|
000032  318c              ADDS     r1,r1,#0x8c
000034  6008              STR      r0,[r1,#0]
;;;39     	
;;;40     	while (CHF_BIT_PER(MDR_RST_CLK->CLOCK_STATUS, RST_CLK_CLOCK_STATUS_PLL_CPU_RDY_Pos));
000036  bf00              NOP      
                  |L1.56|
000038  4805              LDR      r0,|L1.80|
00003a  6840              LDR      r0,[r0,#4]
00003c  2800              CMP      r0,#0
00003e  d0fb              BEQ      |L1.56|
;;;41     	
;;;42     	MDR_RST_CLK->CPU_CLOCK =
000040  f44f7083          MOV      r0,#0x106
000044  4901              LDR      r1,|L1.76|
000046  60c8              STR      r0,[r1,#0xc]
;;;43     		(RST_CLK_CPU_CLOCK_CPU_C1_SEL_HSE << RST_CLK_CPU_CLOCK_CPU_C1_SEL_Pos) |
;;;44     		(RST_CLK_CPU_CLOCK_CPU_C2_SEL_PLL_CPU << RST_CLK_CPU_CLOCK_CPU_C2_SEL_Pos) |
;;;45     		(RST_CLK_CPU_CLOCK_CPU_C3_SEL_CPU_C2 << RST_CLK_CPU_CLOCK_CPU_C3_SEL_Pos) |
;;;46     		(RST_CLK_CPU_CLOCK_HCLK_SEL_CPU_C3 << RST_CLK_CPU_CLOCK_HCLK_SEL_Pos);
;;;47     }
000048  4770              BX       lr
;;;48     
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      0x40020000
                  |L1.80|
                          DCD      0x42400000

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_i
                          REQUIRE _printf_f
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_fp_dec
                          REQUIRE _scanf_int
                          REQUIRE _scanf_real
                  main PROC
;;;66     
;;;67     int main (void)
000000  b51c              PUSH     {r2-r4,lr}
;;;68     {
;;;69     	ClkSetup ();
000002  f7fffffe          BL       ClkSetup
;;;70     	
;;;71     	// Initialize the M0: drive.
;;;72       fs = finit ("M0:");
000006  a036              ADR      r0,|L2.224|
000008  f7fffffe          BL       finit
00000c  4935              LDR      r1,|L2.228|
00000e  7008              STRB     r0,[r1,#0]
;;;73     	
;;;74       // Mount the M0: drive.
;;;75       fs = fmount ("M0:");
000010  a033              ADR      r0,|L2.224|
000012  f7fffffe          BL       fmount
000016  4933              LDR      r1,|L2.228|
000018  7008              STRB     r0,[r1,#0]
;;;76       
;;;77       fs = fvol ("M0:", label, &ser_num);
00001a  4a33              LDR      r2,|L2.232|
00001c  4933              LDR      r1,|L2.236|
00001e  a030              ADR      r0,|L2.224|
000020  f7fffffe          BL       fvol
000024  492f              LDR      r1,|L2.228|
000026  7008              STRB     r0,[r1,#0]
;;;78     	
;;;79     	FreeSize = ffree ("M0:");
000028  a02d              ADR      r0,|L2.224|
00002a  f7fffffe          BL       ffree
00002e  4a30              LDR      r2,|L2.240|
000030  c203              STM      r2!,{r0,r1}
;;;80     	
;;;81     	fs = fpwd ("M0:", StrBuf, StrBufSize);
000032  22c8              MOVS     r2,#0xc8
000034  492f              LDR      r1,|L2.244|
000036  a02a              ADR      r0,|L2.224|
000038  f7fffffe          BL       fpwd
00003c  4929              LDR      r1,|L2.228|
00003e  7008              STRB     r0,[r1,#0]
;;;82     	
;;;83     	fs = fmkdir (DirName);
000040  a02d              ADR      r0,|L2.248|
000042  f7fffffe          BL       fmkdir
000046  4927              LDR      r1,|L2.228|
000048  7008              STRB     r0,[r1,#0]
;;;84     	
;;;85       fout = fopen (FileName, "w"); /* Create a file in subfolder on SD card.*/
00004a  a12d              ADR      r1,|L2.256|
00004c  a02d              ADR      r0,|L2.260|
00004e  f7fffffe          BL       fopen
000052  4931              LDR      r1,|L2.280|
000054  6008              STR      r0,[r1,#0]  ; fout
;;;86     	
;;;87       if (fout != NULL)
000056  4608              MOV      r0,r1
000058  6800              LDR      r0,[r0,#0]  ; fout
00005a  b300              CBZ      r0,|L2.158|
;;;88     	{
;;;89         // Write data to file
;;;90     		fprintf (fout, "Площадь круга радиуса %i равна %f.\n", Radius, 3.1415926*Radius*Radius);
00005c  482f              LDR      r0,|L2.284|
00005e  6800              LDR      r0,[r0,#0]  ; Radius
000060  f7fffffe          BL       __aeabi_i2d
000064  4604              MOV      r4,r0
000066  460d              MOV      r5,r1
000068  482c              LDR      r0,|L2.284|
00006a  6800              LDR      r0,[r0,#0]  ; Radius
00006c  f7fffffe          BL       __aeabi_i2d
000070  4680              MOV      r8,r0
000072  4a2b              LDR      r2,|L2.288|
000074  4b2b              LDR      r3,|L2.292|
000076  f7fffffe          BL       __aeabi_dmul
00007a  4606              MOV      r6,r0
00007c  4622              MOV      r2,r4
00007e  462b              MOV      r3,r5
000080  f7fffffe          BL       __aeabi_dmul
000084  e9cd0100          STRD     r0,r1,[sp,#0]
000088  4824              LDR      r0,|L2.284|
00008a  a127              ADR      r1,|L2.296|
00008c  6802              LDR      r2,[r0,#0]  ; Radius
00008e  4822              LDR      r0,|L2.280|
000090  6800              LDR      r0,[r0,#0]  ; fout
000092  f7fffffe          BL       __2fprintf
;;;91         fclose (fout);
000096  4820              LDR      r0,|L2.280|
000098  6800              LDR      r0,[r0,#0]  ; fout
00009a  f7fffffe          BL       fclose
                  |L2.158|
;;;92     	}
;;;93     	
;;;94     	fin = fopen (FileName, "r"); /* Open a file in subfolder on SD card.*/
00009e  a12b              ADR      r1,|L2.332|
0000a0  a018              ADR      r0,|L2.260|
0000a2  f7fffffe          BL       fopen
0000a6  492a              LDR      r1,|L2.336|
0000a8  6008              STR      r0,[r1,#0]  ; fin
;;;95     	
;;;96       if (fin != NULL)
0000aa  4608              MOV      r0,r1
0000ac  6800              LDR      r0,[r0,#0]  ; fin
0000ae  b150              CBZ      r0,|L2.198|
;;;97     	{
;;;98         // Read data from file
;;;99     		fscanf (fin, "Площадь круга радиуса %i равна %f.\n", &CircleRadius, &CircleArea);
0000b0  4b28              LDR      r3,|L2.340|
0000b2  4a29              LDR      r2,|L2.344|
0000b4  a11c              ADR      r1,|L2.296|
0000b6  4826              LDR      r0,|L2.336|
0000b8  6800              LDR      r0,[r0,#0]  ; fin
0000ba  f7fffffe          BL       __0fscanf
;;;100        fclose (fin);
0000be  4824              LDR      r0,|L2.336|
0000c0  6800              LDR      r0,[r0,#0]  ; fin
0000c2  f7fffffe          BL       fclose
                  |L2.198|
;;;101    	}
;;;102    	
;;;103    	// The drive is no more needed.
;;;104    	// Unmount the M0: drive.
;;;105      fs = funmount ("M0:");
0000c6  a006              ADR      r0,|L2.224|
0000c8  f7fffffe          BL       funmount
0000cc  4905              LDR      r1,|L2.228|
0000ce  7008              STRB     r0,[r1,#0]
;;;106    	
;;;107    	// Uninitialize the M0: drive.
;;;108      fs = funinit ("M0:");
0000d0  a003              ADR      r0,|L2.224|
0000d2  f7fffffe          BL       funinit
0000d6  4903              LDR      r1,|L2.228|
0000d8  7008              STRB     r0,[r1,#0]
;;;109    	
;;;110    	while (true);
0000da  bf00              NOP      
                  |L2.220|
0000dc  e7fe              B        |L2.220|
;;;111    }
                          ENDP

0000de  0000              DCW      0x0000
                  |L2.224|
0000e0  4d303a00          DCB      "M0:",0
                  |L2.228|
                          DCD      ||fs||
                  |L2.232|
                          DCD      ser_num
                  |L2.236|
                          DCD      label
                  |L2.240|
                          DCD      FreeSize
                  |L2.244|
                          DCD      StrBuf
                  |L2.248|
0000f8  4d303a5c          DCB      "M0:\\Dir",0
0000fc  44697200
                  |L2.256|
000100  7700              DCB      "w",0
000102  00                DCB      0
000103  00                DCB      0
                  |L2.260|
000104  46696c65          DCB      "FileDir\\File.txt",0
000108  4469725c
00010c  46696c65
000110  2e747874
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0
                  |L2.280|
                          DCD      fout
                  |L2.284|
                          DCD      Radius
                  |L2.288|
                          DCD      0x4d12d84a
                  |L2.292|
                          DCD      0x400921fb
                  |L2.296|
000128  cfebeef9          DCB      207,235,238,249,224,228,252," ",234,240,243,227,224," ",240
00012c  e0e4fc20
000130  eaf0f3e3
000134  e020f0  
000137  e0e4e8f3          DCB      224,228,232,243,241,224," %i ",240,224,226,237,224," %f."
00013b  f1e02025
00013f  6920f0e0
000143  e2ede020
000147  25662e  
00014a  0a00              DCB      "\n",0
                  |L2.332|
00014c  7200              DCB      "r",0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L2.336|
                          DCD      ||fin||
                  |L2.340|
                          DCD      CircleArea
                  |L2.344|
                          DCD      CircleRadius

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  label
                          %        12
                  StrBuf
                          %        200

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Ver
000000  0100              DCB      0x01,0x00

                          AREA ||.data||, DATA, ALIGN=3

                  ||fs||
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  ser_num
                          DCD      0x00000000
                  FreeSize
                          %        8
                  ||fin||
                          DCD      0x00000000
                  fout
                          DCD      0x00000000
                  Radius
                          DCD      0x0000000a
                  CircleRadius
                          DCD      0x00000000
                  CircleArea
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_Ver____REV16|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_Ver____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_Ver____REVSH|
#line 153
|__asm___6_main_c_Ver____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_Ver____RRX|
#line 328
|__asm___6_main_c_Ver____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
